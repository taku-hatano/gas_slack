/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/admin.apps.approve": {
    /** Approve an app for installation on a workspace. */
    post: operations["admin_apps_approve"];
  };
  "/admin.apps.approved.list": {
    /** List approved apps for an org or workspace. */
    get: operations["admin_apps_approved_list"];
  };
  "/admin.apps.requests.list": {
    /** List app requests for a team/workspace. */
    get: operations["admin_apps_requests_list"];
  };
  "/admin.apps.restrict": {
    /** Restrict an app for installation on a workspace. */
    post: operations["admin_apps_restrict"];
  };
  "/admin.apps.restricted.list": {
    /** List restricted apps for an org or workspace. */
    get: operations["admin_apps_restricted_list"];
  };
  "/admin.conversations.archive": {
    /** Archive a public or private channel. */
    post: operations["admin_conversations_archive"];
  };
  "/admin.conversations.convertToPrivate": {
    /** Convert a public channel to a private channel. */
    post: operations["admin_conversations_convertToPrivate"];
  };
  "/admin.conversations.create": {
    /** Create a public or private channel-based conversation. */
    post: operations["admin_conversations_create"];
  };
  "/admin.conversations.delete": {
    /** Delete a public or private channel. */
    post: operations["admin_conversations_delete"];
  };
  "/admin.conversations.disconnectShared": {
    /** Disconnect a connected channel from one or more workspaces. */
    post: operations["admin_conversations_disconnectShared"];
  };
  "/admin.conversations.ekm.listOriginalConnectedChannelInfo": {
    /** List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM. */
    get: operations["admin_conversations_ekm_listOriginalConnectedChannelInfo"];
  };
  "/admin.conversations.getConversationPrefs": {
    /** Get conversation preferences for a public or private channel. */
    get: operations["admin_conversations_getConversationPrefs"];
  };
  "/admin.conversations.getTeams": {
    /** Get all the workspaces a given public or private channel is connected to within this Enterprise org. */
    get: operations["admin_conversations_getTeams"];
  };
  "/admin.conversations.invite": {
    /** Invite a user to a public or private channel. */
    post: operations["admin_conversations_invite"];
  };
  "/admin.conversations.rename": {
    /** Rename a public or private channel. */
    post: operations["admin_conversations_rename"];
  };
  "/admin.conversations.restrictAccess.addGroup": {
    /** Add an allowlist of IDP groups for accessing a channel */
    post: operations["admin_conversations_restrictAccess_addGroup"];
  };
  "/admin.conversations.restrictAccess.listGroups": {
    /** List all IDP Groups linked to a channel */
    get: operations["admin_conversations_restrictAccess_listGroups"];
  };
  "/admin.conversations.restrictAccess.removeGroup": {
    /** Remove a linked IDP group linked from a private channel */
    post: operations["admin_conversations_restrictAccess_removeGroup"];
  };
  "/admin.conversations.search": {
    /** Search for public or private channels in an Enterprise organization. */
    get: operations["admin_conversations_search"];
  };
  "/admin.conversations.setConversationPrefs": {
    /** Set the posting permissions for a public or private channel. */
    post: operations["admin_conversations_setConversationPrefs"];
  };
  "/admin.conversations.setTeams": {
    /** Set the workspaces in an Enterprise grid org that connect to a public or private channel. */
    post: operations["admin_conversations_setTeams"];
  };
  "/admin.conversations.unarchive": {
    /** Unarchive a public or private channel. */
    post: operations["admin_conversations_unarchive"];
  };
  "/admin.emoji.add": {
    /** Add an emoji. */
    post: operations["admin_emoji_add"];
  };
  "/admin.emoji.addAlias": {
    /** Add an emoji alias. */
    post: operations["admin_emoji_addAlias"];
  };
  "/admin.emoji.list": {
    /** List emoji for an Enterprise Grid organization. */
    get: operations["admin_emoji_list"];
  };
  "/admin.emoji.remove": {
    /** Remove an emoji across an Enterprise Grid organization */
    post: operations["admin_emoji_remove"];
  };
  "/admin.emoji.rename": {
    /** Rename an emoji. */
    post: operations["admin_emoji_rename"];
  };
  "/admin.inviteRequests.approve": {
    /** Approve a workspace invite request. */
    post: operations["admin_inviteRequests_approve"];
  };
  "/admin.inviteRequests.approved.list": {
    /** List all approved workspace invite requests. */
    get: operations["admin_inviteRequests_approved_list"];
  };
  "/admin.inviteRequests.denied.list": {
    /** List all denied workspace invite requests. */
    get: operations["admin_inviteRequests_denied_list"];
  };
  "/admin.inviteRequests.deny": {
    /** Deny a workspace invite request. */
    post: operations["admin_inviteRequests_deny"];
  };
  "/admin.inviteRequests.list": {
    /** List all pending workspace invite requests. */
    get: operations["admin_inviteRequests_list"];
  };
  "/admin.teams.admins.list": {
    /** List all of the admins on a given workspace. */
    get: operations["admin_teams_admins_list"];
  };
  "/admin.teams.create": {
    /** Create an Enterprise team. */
    post: operations["admin_teams_create"];
  };
  "/admin.teams.list": {
    /** List all teams on an Enterprise organization */
    get: operations["admin_teams_list"];
  };
  "/admin.teams.owners.list": {
    /** List all of the owners on a given workspace. */
    get: operations["admin_teams_owners_list"];
  };
  "/admin.teams.settings.info": {
    /** Fetch information about settings in a workspace */
    get: operations["admin_teams_settings_info"];
  };
  "/admin.teams.settings.setDefaultChannels": {
    /** Set the default channels of a workspace. */
    post: operations["admin_teams_settings_setDefaultChannels"];
  };
  "/admin.teams.settings.setDescription": {
    /** Set the description of a given workspace. */
    post: operations["admin_teams_settings_setDescription"];
  };
  "/admin.teams.settings.setDiscoverability": {
    /** An API method that allows admins to set the discoverability of a given workspace */
    post: operations["admin_teams_settings_setDiscoverability"];
  };
  "/admin.teams.settings.setIcon": {
    /** Sets the icon of a workspace. */
    post: operations["admin_teams_settings_setIcon"];
  };
  "/admin.teams.settings.setName": {
    /** Set the name of a given workspace. */
    post: operations["admin_teams_settings_setName"];
  };
  "/admin.usergroups.addChannels": {
    /** Add one or more default channels to an IDP group. */
    post: operations["admin_usergroups_addChannels"];
  };
  "/admin.usergroups.addTeams": {
    /** Associate one or more default workspaces with an organization-wide IDP group. */
    post: operations["admin_usergroups_addTeams"];
  };
  "/admin.usergroups.listChannels": {
    /** List the channels linked to an org-level IDP group (user group). */
    get: operations["admin_usergroups_listChannels"];
  };
  "/admin.usergroups.removeChannels": {
    /** Remove one or more default channels from an org-level IDP group (user group). */
    post: operations["admin_usergroups_removeChannels"];
  };
  "/admin.users.assign": {
    /** Add an Enterprise user to a workspace. */
    post: operations["admin_users_assign"];
  };
  "/admin.users.invite": {
    /** Invite a user to a workspace. */
    post: operations["admin_users_invite"];
  };
  "/admin.users.list": {
    /** List users on a workspace */
    get: operations["admin_users_list"];
  };
  "/admin.users.remove": {
    /** Remove a user from a workspace. */
    post: operations["admin_users_remove"];
  };
  "/admin.users.session.invalidate": {
    /** Invalidate a single session for a user by session_id */
    post: operations["admin_users_session_invalidate"];
  };
  "/admin.users.session.reset": {
    /** Wipes all valid sessions on all devices for a given user */
    post: operations["admin_users_session_reset"];
  };
  "/admin.users.setAdmin": {
    /** Set an existing guest, regular user, or owner to be an admin user. */
    post: operations["admin_users_setAdmin"];
  };
  "/admin.users.setExpiration": {
    /** Set an expiration for a guest user */
    post: operations["admin_users_setExpiration"];
  };
  "/admin.users.setOwner": {
    /** Set an existing guest, regular user, or admin user to be a workspace owner. */
    post: operations["admin_users_setOwner"];
  };
  "/admin.users.setRegular": {
    /** Set an existing guest user, admin user, or owner to be a regular user. */
    post: operations["admin_users_setRegular"];
  };
  "/api.test": {
    /** Checks API calling code. */
    get: operations["api_test"];
  };
  "/apps.event.authorizations.list": {
    /** Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to. */
    get: operations["apps_event_authorizations_list"];
  };
  "/apps.permissions.info": {
    /** Returns list of permissions this app has on a team. */
    get: operations["apps_permissions_info"];
  };
  "/apps.permissions.request": {
    /** Allows an app to request additional scopes */
    get: operations["apps_permissions_request"];
  };
  "/apps.permissions.resources.list": {
    /** Returns list of resource grants this app has on a team. */
    get: operations["apps_permissions_resources_list"];
  };
  "/apps.permissions.scopes.list": {
    /** Returns list of scopes this app has on a team. */
    get: operations["apps_permissions_scopes_list"];
  };
  "/apps.permissions.users.list": {
    /** Returns list of user grants and corresponding scopes this app has on a team. */
    get: operations["apps_permissions_users_list"];
  };
  "/apps.permissions.users.request": {
    /** Enables an app to trigger a permissions modal to grant an app access to a user access scope. */
    get: operations["apps_permissions_users_request"];
  };
  "/apps.uninstall": {
    /** Uninstalls your app from a workspace. */
    get: operations["apps_uninstall"];
  };
  "/auth.revoke": {
    /** Revokes a token. */
    get: operations["auth_revoke"];
  };
  "/auth.test": {
    /** Checks authentication & identity. */
    get: operations["auth_test"];
  };
  "/bots.info": {
    /** Gets information about a bot user. */
    get: operations["bots_info"];
  };
  "/calls.add": {
    /** Registers a new Call. */
    post: operations["calls_add"];
  };
  "/calls.end": {
    /** Ends a Call. */
    post: operations["calls_end"];
  };
  "/calls.info": {
    /** Returns information about a Call. */
    get: operations["calls_info"];
  };
  "/calls.participants.add": {
    /** Registers new participants added to a Call. */
    post: operations["calls_participants_add"];
  };
  "/calls.participants.remove": {
    /** Registers participants removed from a Call. */
    post: operations["calls_participants_remove"];
  };
  "/calls.update": {
    /** Updates information about a Call. */
    post: operations["calls_update"];
  };
  "/chat.delete": {
    /** Deletes a message. */
    post: operations["chat_delete"];
  };
  "/chat.deleteScheduledMessage": {
    /** Deletes a pending scheduled message from the queue. */
    post: operations["chat_deleteScheduledMessage"];
  };
  "/chat.getPermalink": {
    /** Retrieve a permalink URL for a specific extant message */
    get: operations["chat_getPermalink"];
  };
  "/chat.meMessage": {
    /** Share a me message into a channel. */
    post: operations["chat_meMessage"];
  };
  "/chat.postEphemeral": {
    /** Sends an ephemeral message to a user in a channel. */
    post: operations["chat_postEphemeral"];
  };
  "/chat.postMessage": {
    /** Sends a message to a channel. */
    post: operations["chat_postMessage"];
  };
  "/chat.scheduleMessage": {
    /** Schedules a message to be sent to a channel. */
    post: operations["chat_scheduleMessage"];
  };
  "/chat.scheduledMessages.list": {
    /** Returns a list of scheduled messages. */
    get: operations["chat_scheduledMessages_list"];
  };
  "/chat.unfurl": {
    /** Provide custom unfurl behavior for user-posted URLs */
    post: operations["chat_unfurl"];
  };
  "/chat.update": {
    /** Updates a message. */
    post: operations["chat_update"];
  };
  "/conversations.archive": {
    /** Archives a conversation. */
    post: operations["conversations_archive"];
  };
  "/conversations.close": {
    /** Closes a direct message or multi-person direct message. */
    post: operations["conversations_close"];
  };
  "/conversations.create": {
    /** Initiates a public or private channel-based conversation */
    post: operations["conversations_create"];
  };
  "/conversations.history": {
    /** Fetches a conversation's history of messages and events. */
    get: operations["conversations_history"];
  };
  "/conversations.info": {
    /** Retrieve information about a conversation. */
    get: operations["conversations_info"];
  };
  "/conversations.invite": {
    /** Invites users to a channel. */
    post: operations["conversations_invite"];
  };
  "/conversations.join": {
    /** Joins an existing conversation. */
    post: operations["conversations_join"];
  };
  "/conversations.kick": {
    /** Removes a user from a conversation. */
    post: operations["conversations_kick"];
  };
  "/conversations.leave": {
    /** Leaves a conversation. */
    post: operations["conversations_leave"];
  };
  "/conversations.list": {
    /** Lists all channels in a Slack team. */
    get: operations["conversations_list"];
  };
  "/conversations.mark": {
    /** Sets the read cursor in a channel. */
    post: operations["conversations_mark"];
  };
  "/conversations.members": {
    /** Retrieve members of a conversation. */
    get: operations["conversations_members"];
  };
  "/conversations.open": {
    /** Opens or resumes a direct message or multi-person direct message. */
    post: operations["conversations_open"];
  };
  "/conversations.rename": {
    /** Renames a conversation. */
    post: operations["conversations_rename"];
  };
  "/conversations.replies": {
    /** Retrieve a thread of messages posted to a conversation */
    get: operations["conversations_replies"];
  };
  "/conversations.setPurpose": {
    /** Sets the purpose for a conversation. */
    post: operations["conversations_setPurpose"];
  };
  "/conversations.setTopic": {
    /** Sets the topic for a conversation. */
    post: operations["conversations_setTopic"];
  };
  "/conversations.unarchive": {
    /** Reverses conversation archival. */
    post: operations["conversations_unarchive"];
  };
  "/dialog.open": {
    /** Open a dialog with a user */
    get: operations["dialog_open"];
  };
  "/dnd.endDnd": {
    /** Ends the current user's Do Not Disturb session immediately. */
    post: operations["dnd_endDnd"];
  };
  "/dnd.endSnooze": {
    /** Ends the current user's snooze mode immediately. */
    post: operations["dnd_endSnooze"];
  };
  "/dnd.info": {
    /** Retrieves a user's current Do Not Disturb status. */
    get: operations["dnd_info"];
  };
  "/dnd.setSnooze": {
    /** Turns on Do Not Disturb mode for the current user, or changes its duration. */
    post: operations["dnd_setSnooze"];
  };
  "/dnd.teamInfo": {
    /** Retrieves the Do Not Disturb status for up to 50 users on a team. */
    get: operations["dnd_teamInfo"];
  };
  "/emoji.list": {
    /** Lists custom emoji for a team. */
    get: operations["emoji_list"];
  };
  "/files.comments.delete": {
    /** Deletes an existing comment on a file. */
    post: operations["files_comments_delete"];
  };
  "/files.delete": {
    /** Deletes a file. */
    post: operations["files_delete"];
  };
  "/files.info": {
    /** Gets information about a file. */
    get: operations["files_info"];
  };
  "/files.list": {
    /** List for a team, in a channel, or from a user with applied filters. */
    get: operations["files_list"];
  };
  "/files.remote.add": {
    /** Adds a file from a remote service */
    post: operations["files_remote_add"];
  };
  "/files.remote.info": {
    /** Retrieve information about a remote file added to Slack */
    get: operations["files_remote_info"];
  };
  "/files.remote.list": {
    /** Retrieve information about a remote file added to Slack */
    get: operations["files_remote_list"];
  };
  "/files.remote.remove": {
    /** Remove a remote file. */
    post: operations["files_remote_remove"];
  };
  "/files.remote.share": {
    /** Share a remote file into a channel. */
    get: operations["files_remote_share"];
  };
  "/files.remote.update": {
    /** Updates an existing remote file. */
    post: operations["files_remote_update"];
  };
  "/files.revokePublicURL": {
    /** Revokes public/external sharing access for a file */
    post: operations["files_revokePublicURL"];
  };
  "/files.sharedPublicURL": {
    /** Enables a file for public/external sharing. */
    post: operations["files_sharedPublicURL"];
  };
  "/files.upload": {
    /** Uploads or creates a file. */
    post: operations["files_upload"];
  };
  "/migration.exchange": {
    /** For Enterprise Grid workspaces, map local user IDs to global user IDs */
    get: operations["migration_exchange"];
  };
  "/oauth.access": {
    /** Exchanges a temporary OAuth verifier code for an access token. */
    get: operations["oauth_access"];
  };
  "/oauth.token": {
    /** Exchanges a temporary OAuth verifier code for a workspace token. */
    get: operations["oauth_token"];
  };
  "/oauth.v2.access": {
    /** Exchanges a temporary OAuth verifier code for an access token. */
    get: operations["oauth_v2_access"];
  };
  "/pins.add": {
    /** Pins an item to a channel. */
    post: operations["pins_add"];
  };
  "/pins.list": {
    /** Lists items pinned to a channel. */
    get: operations["pins_list"];
  };
  "/pins.remove": {
    /** Un-pins an item from a channel. */
    post: operations["pins_remove"];
  };
  "/reactions.add": {
    /** Adds a reaction to an item. */
    post: operations["reactions_add"];
  };
  "/reactions.get": {
    /** Gets reactions for an item. */
    get: operations["reactions_get"];
  };
  "/reactions.list": {
    /** Lists reactions made by a user. */
    get: operations["reactions_list"];
  };
  "/reactions.remove": {
    /** Removes a reaction from an item. */
    post: operations["reactions_remove"];
  };
  "/reminders.add": {
    /** Creates a reminder. */
    post: operations["reminders_add"];
  };
  "/reminders.complete": {
    /** Marks a reminder as complete. */
    post: operations["reminders_complete"];
  };
  "/reminders.delete": {
    /** Deletes a reminder. */
    post: operations["reminders_delete"];
  };
  "/reminders.info": {
    /** Gets information about a reminder. */
    get: operations["reminders_info"];
  };
  "/reminders.list": {
    /** Lists all reminders created by or for a given user. */
    get: operations["reminders_list"];
  };
  "/rtm.connect": {
    /** Starts a Real Time Messaging session. */
    get: operations["rtm_connect"];
  };
  "/search.messages": {
    /** Searches for messages matching a query. */
    get: operations["search_messages"];
  };
  "/stars.add": {
    /** Adds a star to an item. */
    post: operations["stars_add"];
  };
  "/stars.list": {
    /** Lists stars for a user. */
    get: operations["stars_list"];
  };
  "/stars.remove": {
    /** Removes a star from an item. */
    post: operations["stars_remove"];
  };
  "/team.accessLogs": {
    /** Gets the access logs for the current team. */
    get: operations["team_accessLogs"];
  };
  "/team.billableInfo": {
    /** Gets billable users information for the current team. */
    get: operations["team_billableInfo"];
  };
  "/team.info": {
    /** Gets information about the current team. */
    get: operations["team_info"];
  };
  "/team.integrationLogs": {
    /** Gets the integration logs for the current team. */
    get: operations["team_integrationLogs"];
  };
  "/team.profile.get": {
    /** Retrieve a team's profile. */
    get: operations["team_profile_get"];
  };
  "/usergroups.create": {
    /** Create a User Group */
    post: operations["usergroups_create"];
  };
  "/usergroups.disable": {
    /** Disable an existing User Group */
    post: operations["usergroups_disable"];
  };
  "/usergroups.enable": {
    /** Enable a User Group */
    post: operations["usergroups_enable"];
  };
  "/usergroups.list": {
    /** List all User Groups for a team */
    get: operations["usergroups_list"];
  };
  "/usergroups.update": {
    /** Update an existing User Group */
    post: operations["usergroups_update"];
  };
  "/usergroups.users.list": {
    /** List all users in a User Group */
    get: operations["usergroups_users_list"];
  };
  "/usergroups.users.update": {
    /** Update the list of users for a User Group */
    post: operations["usergroups_users_update"];
  };
  "/users.conversations": {
    /** List conversations the calling user may access. */
    get: operations["users_conversations"];
  };
  "/users.deletePhoto": {
    /** Delete the user profile photo */
    post: operations["users_deletePhoto"];
  };
  "/users.getPresence": {
    /** Gets user presence information. */
    get: operations["users_getPresence"];
  };
  "/users.identity": {
    /** Get a user's identity. */
    get: operations["users_identity"];
  };
  "/users.info": {
    /** Gets information about a user. */
    get: operations["users_info"];
  };
  "/users.list": {
    /** Lists all users in a Slack team. */
    get: operations["users_list"];
  };
  "/users.lookupByEmail": {
    /** Find a user with an email address. */
    get: operations["users_lookupByEmail"];
  };
  "/users.profile.get": {
    /** Retrieves a user's profile information. */
    get: operations["users_profile_get"];
  };
  "/users.profile.set": {
    /** Set the profile information for a user. */
    post: operations["users_profile_set"];
  };
  "/users.setActive": {
    /** Marked a user as active. Deprecated and non-functional. */
    post: operations["users_setActive"];
  };
  "/users.setPhoto": {
    /** Set the user profile photo */
    post: operations["users_setPhoto"];
  };
  "/users.setPresence": {
    /** Manually sets user presence. */
    post: operations["users_setPresence"];
  };
  "/views.open": {
    /** Open a view for a user. */
    get: operations["views_open"];
  };
  "/views.publish": {
    /** Publish a static view for a User. */
    get: operations["views_publish"];
  };
  "/views.push": {
    /** Push a view onto the stack of a root view. */
    get: operations["views_push"];
  };
  "/views.update": {
    /** Update an existing view. */
    get: operations["views_update"];
  };
  "/workflows.stepCompleted": {
    /** Indicate that an app's step in a workflow completed execution. */
    get: operations["workflows_stepCompleted"];
  };
  "/workflows.stepFailed": {
    /** Indicate that an app's step in a workflow failed to execute. */
    get: operations["workflows_stepFailed"];
  };
  "/workflows.updateStep": {
    /** Update the configuration for a workflow extension step. */
    get: operations["workflows_updateStep"];
  };
}

export interface definitions {
  /**
   * Block Kit blocks
   * @description This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace.
   */
  blocks: ({
    type: string;
  } & { [key: string]: unknown })[];
  /** App ID */
  defs_app_id: string;
  /** Bot User ID */
  defs_bot_id: string;
  /** Channel-like conversation ID */
  defs_channel: string;
  /** Channel ID */
  defs_channel_id: string;
  /** Name of a channel */
  defs_channel_name: string;
  /** File Comment ID */
  defs_comment_id: string;
  /** Direct Message Channel ID */
  defs_dm_id: string;
  /** Enterprise ID */
  defs_enterprise_id: string;
  /** Name of the enterprise org */
  defs_enterprise_name: string;
  /** Enterprise User ID */
  defs_enterprise_user_id: string;
  /** File ID */
  defs_file_id: string;
  /** Private Channel ID */
  defs_group_id: string;
  /**
   * default failure response
   * @enum {boolean}
   */
  defs_ok_false: false;
  /**
   * default success response
   * @enum {boolean}
   */
  defs_ok_true: true;
  /** App ID or empty string */
  defs_optional_app_id: string;
  /** Info for a pinned item */
  defs_pinned_info: { [key: string]: unknown };
  /** Reminder ID */
  defs_reminder_id: string;
  /** Subteam ID */
  defs_subteam_id: string;
  /** Team ID */
  defs_team: string;
  /** User ID or empty string, used for topic and purpose creation */
  defs_topic_purpose_creator: string;
  /** Timestamp in format 0123456789.012345 */
  defs_ts: string;
  /** User ID */
  defs_user_id: string;
  /** Team or Enterprise ID */
  defs_workspace_id: string;
  /** Bot Profile Object */
  objs_bot_profile: {
    app_id: definitions["defs_app_id"];
    deleted: boolean;
    icons: {
      /** Format: uri */
      image_36: string;
      /** Format: uri */
      image_48: string;
      /** Format: uri */
      image_72: string;
    };
    id: definitions["defs_bot_id"];
    name: string;
    team_id: definitions["defs_team"];
    updated: number;
  };
  /** Channel Object */
  objs_channel: {
    accepted_user?: definitions["defs_user_id"];
    created: number;
    creator: definitions["defs_user_id"];
    id: definitions["defs_channel_id"];
    is_archived?: boolean;
    is_channel: boolean;
    is_frozen?: boolean;
    is_general?: boolean;
    is_member?: boolean;
    is_moved?: number;
    is_mpim: boolean;
    is_non_threadable?: boolean;
    is_org_shared: boolean;
    is_pending_ext_shared?: boolean;
    is_private: boolean;
    is_read_only?: boolean;
    is_shared: boolean;
    is_thread_only?: boolean;
    last_read?: definitions["defs_ts"];
    latest?: [definitions["objs_message"], unknown];
    members: definitions["defs_user_id"][];
    name: string;
    name_normalized: string;
    num_members?: number;
    pending_shared?: definitions["defs_team"][];
    previous_names?: definitions["defs_channel_name"][];
    priority?: number;
    purpose: {
      creator: definitions["defs_topic_purpose_creator"];
      last_set: number;
      value: string;
    };
    topic: {
      creator: definitions["defs_topic_purpose_creator"];
      last_set: number;
      value: string;
    };
    /** Field to determine whether a channel has ever been shared/disconnected in the past */
    unlinked?: number;
    unread_count?: number;
    unread_count_display?: number;
  };
  /** File Comment Object */
  objs_comment: {
    comment: string;
    created: number;
    id: definitions["defs_comment_id"];
    is_intro: boolean;
    is_starred?: boolean;
    num_stars?: number;
    pinned_info?: definitions["defs_pinned_info"];
    pinned_to?: definitions["defs_channel"][];
    reactions?: definitions["objs_reaction"][];
    timestamp: number;
    user: definitions["defs_user_id"];
  };
  /** file comments object */
  objs_comments: unknown[];
  objs_conversation: [
    {
      accepted_user?: definitions["defs_user_id"];
      connected_team_ids?: definitions["defs_workspace_id"][];
      conversation_host_id?: definitions["defs_workspace_id"];
      created: number;
      creator: definitions["defs_user_id"];
      display_counts?: {
        display_counts: number;
        guest_counts: number;
      };
      enterprise_id?: definitions["defs_enterprise_id"];
      has_pins?: boolean;
      id: definitions["defs_channel"];
      internal_team_ids?: definitions["defs_team"][];
      is_archived: boolean;
      is_channel: boolean;
      is_ext_shared?: boolean;
      is_frozen?: boolean;
      is_general: boolean;
      is_global_shared?: boolean;
      is_group: boolean;
      is_im: boolean;
      is_member?: boolean;
      is_moved?: number;
      /** @enum {boolean} */
      is_mpim: false;
      is_non_threadable?: boolean;
      is_open?: boolean;
      is_org_default?: boolean;
      is_org_mandatory?: boolean;
      is_org_shared: boolean;
      is_pending_ext_shared?: boolean;
      is_private: boolean;
      is_read_only?: boolean;
      is_shared: boolean;
      is_starred?: boolean;
      is_thread_only?: boolean;
      last_read?: definitions["defs_ts"];
      latest?: [definitions["objs_message"], unknown];
      members?: definitions["defs_user_id"][];
      name: string;
      name_normalized: string;
      num_members?: number;
      parent_conversation?: [definitions["defs_channel"], unknown];
      pending_connected_team_ids?: definitions["defs_team"][];
      pending_shared?: definitions["defs_team"][];
      pin_count?: number;
      previous_names?: definitions["defs_channel_name"][];
      priority?: number;
      purpose: {
        creator: definitions["defs_topic_purpose_creator"];
        last_set: number;
        value: string;
      };
      shared_team_ids?: definitions["defs_team"][];
      shares?: {
        accepted_user?: definitions["defs_user_id"];
        is_active: boolean;
        team: definitions["objs_team"];
        user: definitions["defs_user_id"];
      }[];
      timezone_count?: number;
      topic: {
        creator: definitions["defs_topic_purpose_creator"];
        last_set: number;
        value: string;
      };
      /** Field to determine whether a channel has ever been shared/disconnected in the past */
      unlinked?: number;
      unread_count?: number;
      unread_count_display?: number;
      use_case?: string;
      user?: definitions["defs_user_id"];
      version?: number;
    },
    {
      accepted_user?: definitions["defs_user_id"];
      connected_team_ids?: definitions["defs_team"][];
      conversation_host_id?: definitions["defs_workspace_id"];
      created: number;
      creator: definitions["defs_user_id"];
      display_counts?: {
        display_counts: number;
        guest_counts: number;
      };
      id: definitions["defs_channel"];
      internal_team_ids?: definitions["defs_team"][];
      is_archived: boolean;
      is_channel: boolean;
      is_ext_shared?: boolean;
      is_frozen?: boolean;
      is_general: boolean;
      is_group: boolean;
      is_im: boolean;
      is_member?: boolean;
      is_moved?: number;
      /** @enum {boolean} */
      is_mpim: true;
      is_non_threadable?: boolean;
      is_open?: boolean;
      is_org_shared: boolean;
      is_pending_ext_shared?: boolean;
      is_private: boolean;
      is_read_only?: boolean;
      is_shared: boolean;
      is_starred?: boolean;
      is_thread_only?: boolean;
      last_read?: definitions["defs_ts"];
      latest?: [definitions["objs_message"], unknown];
      members?: definitions["defs_user_id"][];
      name: string;
      name_normalized: string;
      num_members?: number;
      parent_conversation?: [definitions["defs_channel"], unknown];
      pending_connected_team_ids?: definitions["defs_team"][];
      pending_shared?: definitions["defs_team"][];
      pin_count?: number;
      previous_names?: definitions["defs_channel_name"][];
      priority?: number;
      purpose: {
        creator: definitions["defs_topic_purpose_creator"];
        last_set: number;
        value: string;
      };
      shared_team_ids?: definitions["defs_team"][];
      shares?: {
        accepted_user?: definitions["defs_user_id"];
        is_active: boolean;
        team: definitions["objs_team"];
        user: definitions["defs_user_id"];
      }[];
      timezone_count?: number;
      topic: {
        creator: definitions["defs_topic_purpose_creator"];
        last_set: number;
        value: string;
      };
      /** Field to determine whether a channel has ever been shared/disconnected in the past */
      unlinked?: number;
      unread_count?: number;
      unread_count_display?: number;
      user?: definitions["defs_user_id"];
      version?: number;
    },
    {
      created: number;
      has_pins?: boolean;
      id: definitions["defs_dm_id"];
      is_archived?: boolean;
      is_ext_shared?: boolean;
      is_frozen?: boolean;
      is_im: boolean;
      is_open?: boolean;
      is_org_shared: boolean;
      is_shared?: boolean;
      is_starred?: boolean;
      is_user_deleted?: boolean;
      last_read?: definitions["defs_ts"];
      latest?: [definitions["objs_message"], unknown];
      parent_conversation?: [definitions["defs_channel"], unknown];
      pin_count?: number;
      priority: number;
      shares?: {
        date_create: number;
        id: definitions["defs_team"];
        is_active: boolean;
        name: string;
        team: definitions["objs_team"];
      }[];
      unread_count?: number;
      unread_count_display?: number;
      user: definitions["defs_user_id"];
      version?: number;
    }
  ];
  objs_enterprise_user: {
    enterprise_id: definitions["defs_enterprise_id"];
    enterprise_name: definitions["defs_enterprise_name"];
    id: definitions["defs_enterprise_user_id"];
    is_admin: boolean;
    is_owner: boolean;
    teams: definitions["defs_team"][];
  };
  /** External Org Migrations */
  objs_external_org_migrations: {
    current: {
      date_started: number;
      team_id: string;
    }[];
    date_updated: number;
  };
  /** file object */
  objs_file: {
    channels?: definitions["defs_channel_id"][];
    comments_count?: number;
    created?: number;
    date_delete?: number;
    display_as_bot?: boolean;
    editable?: boolean;
    editor?: definitions["defs_user_id"];
    external_id?: string;
    external_type?: string;
    /** Format: uri */
    external_url?: string;
    filetype?: string;
    groups?: definitions["defs_group_id"][];
    has_rich_preview?: boolean;
    id?: definitions["defs_file_id"];
    image_exif_rotation?: number;
    ims?: definitions["defs_dm_id"][];
    is_external?: boolean;
    is_public?: boolean;
    is_starred?: boolean;
    is_tombstoned?: boolean;
    last_editor?: definitions["defs_user_id"];
    mimetype?: string;
    mode?: string;
    name?: string;
    non_owner_editable?: boolean;
    num_stars?: number;
    original_h?: number;
    original_w?: number;
    /** Format: uri */
    permalink?: string;
    /** Format: uri */
    permalink_public?: string;
    pinned_info?: definitions["defs_pinned_info"];
    pinned_to?: definitions["defs_channel"][];
    pretty_type?: string;
    preview?: string;
    public_url_shared?: boolean;
    reactions?: definitions["objs_reaction"][];
    shares?: {
      private?: { [key: string]: unknown };
      public?: { [key: string]: unknown };
    };
    size?: number;
    source_team?: definitions["defs_team"];
    state?: string;
    /** Format: uri */
    thumb_1024?: string;
    thumb_1024_h?: number;
    thumb_1024_w?: number;
    /** Format: uri */
    thumb_160?: string;
    /** Format: uri */
    thumb_360?: string;
    thumb_360_h?: number;
    thumb_360_w?: number;
    /** Format: uri */
    thumb_480?: string;
    thumb_480_h?: number;
    thumb_480_w?: number;
    /** Format: uri */
    thumb_64?: string;
    /** Format: uri */
    thumb_720?: string;
    thumb_720_h?: number;
    thumb_720_w?: number;
    /** Format: uri */
    thumb_80?: string;
    /** Format: uri */
    thumb_800?: string;
    thumb_800_h?: number;
    thumb_800_w?: number;
    /** Format: uri */
    thumb_960?: string;
    thumb_960_h?: number;
    thumb_960_w?: number;
    thumb_tiny?: string;
    timestamp?: number;
    title?: string;
    updated?: number;
    /** Format: uri */
    url_private?: string;
    /** Format: uri */
    url_private_download?: string;
    user?: string;
    user_team?: definitions["defs_team"];
    username?: string;
  };
  objs_icon: {
    image_102?: string;
    image_132?: string;
    image_230?: string;
    image_34?: string;
    image_44?: string;
    image_68?: string;
    image_88?: string;
    image_default?: boolean;
  };
  /** Message object */
  objs_message: {
    attachments?: {
      fallback?: string;
      id: number;
      image_bytes?: number;
      image_height?: number;
      image_url?: string;
      image_width?: number;
    }[];
    blocks?: definitions["blocks"];
    bot_id?: [definitions["defs_bot_id"], unknown];
    bot_profile?: definitions["objs_bot_profile"];
    client_msg_id?: string;
    comment?: definitions["objs_comment"];
    display_as_bot?: boolean;
    file?: definitions["objs_file"];
    files?: definitions["objs_file"][];
    icons?: {
      emoji?: string;
      /** Format: uri */
      image_64?: string;
    };
    inviter?: definitions["defs_user_id"];
    is_delayed_message?: boolean;
    is_intro?: boolean;
    is_starred?: boolean;
    last_read?: definitions["defs_ts"];
    latest_reply?: definitions["defs_ts"];
    name?: string;
    old_name?: string;
    parent_user_id?: definitions["defs_user_id"];
    /** Format: uri */
    permalink?: string;
    pinned_to?: definitions["defs_channel"][];
    purpose?: string;
    reactions?: definitions["objs_reaction"][];
    reply_count?: number;
    reply_users?: definitions["defs_user_id"][];
    reply_users_count?: number;
    source_team?: definitions["defs_workspace_id"];
    subscribed?: boolean;
    subtype?: string;
    team?: definitions["defs_workspace_id"];
    text: string;
    thread_ts?: definitions["defs_ts"];
    topic?: string;
    ts: definitions["defs_ts"];
    type: string;
    unread_count?: number;
    upload?: boolean;
    user?: definitions["defs_user_id"];
    user_profile?: definitions["objs_user_profile_short"];
    user_team?: definitions["defs_workspace_id"];
    username?: string;
  };
  /** paging object */
  objs_paging: {
    count?: number;
    page: number;
    pages?: number;
    per_page?: number;
    spill?: number;
    total: number;
  };
  objs_primary_owner: {
    email: string;
    id: string;
  };
  /** Reaction object */
  objs_reaction: {
    count: number;
    name: string;
    users: definitions["defs_user_id"][];
  } & { [key: string]: unknown };
  objs_reminder: {
    complete_ts?: number;
    creator: definitions["defs_user_id"];
    id: definitions["defs_reminder_id"];
    recurring: boolean;
    text: string;
    time?: number;
    user: definitions["defs_user_id"];
  };
  /** resources in info from apps.permissions.info */
  objs_resources: {
    excluded_ids?: [definitions["defs_channel"], definitions["defs_team"]][];
    ids: [definitions["defs_channel"], definitions["defs_team"]][];
    wildcard?: boolean;
  };
  objs_response_metadata: [
    {
      next_cursor: string;
    },
    {
      messages: string[];
      warnings: "method_deprecated"[];
    },
    {
      messages: string[];
      next_cursor: string;
      warnings: "method_deprecated"[];
    }
  ];
  objs_scopes: string[];
  /** Subteam/Usergroup Object */
  objs_subteam: {
    auto_provision: boolean;
    auto_type: [unknown, "owner" | "admin"];
    channel_count?: number;
    created_by: definitions["defs_user_id"];
    date_create: number;
    date_delete: number;
    date_update: number;
    deleted_by: [unknown, definitions["defs_user_id"]];
    description: string;
    enterprise_subteam_id: string;
    handle: string;
    id: definitions["defs_subteam_id"];
    is_external: boolean;
    is_subteam: boolean;
    is_usergroup: boolean;
    name: string;
    prefs: {
      channels: definitions["defs_channel_id"][];
      groups: definitions["defs_group_id"][];
    };
    team_id: definitions["defs_team"];
    updated_by: definitions["defs_user_id"];
    user_count?: number;
    users?: definitions["defs_user_id"][];
  };
  /** Team Object */
  objs_team: {
    archived?: boolean;
    /** Format: uri */
    avatar_base_url?: string;
    created?: number;
    date_create?: number;
    deleted?: boolean;
    description?: unknown;
    discoverable?: [unknown, string];
    domain: string;
    email_domain: string;
    enterprise_id?: definitions["defs_enterprise_id"];
    enterprise_name?: definitions["defs_enterprise_name"];
    external_org_migrations?: definitions["objs_external_org_migrations"];
    has_compliance_export?: boolean;
    icon: definitions["objs_icon"];
    id: definitions["defs_workspace_id"];
    is_assigned?: boolean;
    is_enterprise?: number;
    is_over_storage_limit?: boolean;
    limit_ts?: number;
    locale?: string;
    messages_count?: number;
    msg_edit_window_mins?: number;
    name: string;
    over_integrations_limit?: boolean;
    over_storage_limit?: boolean;
    pay_prod_cur?: string;
    /** @enum {string} */
    plan?: "" | "std" | "plus" | "compliance" | "enterprise";
    primary_owner?: definitions["objs_primary_owner"];
    sso_provider?: {
      label?: string;
      name?: string;
      type?: string;
    };
  };
  objs_team_profile_field: {
    field_name?: unknown;
    hint: string;
    id: string;
    is_hidden?: boolean;
    label: string;
    options?: [unknown, definitions["objs_team_profile_field_option"]];
    ordering: number;
    possible_values?: string[];
    /** @enum {string} */
    type: "text" | "date" | "link" | "mailto" | "options_list" | "user";
  };
  objs_team_profile_field_option: {
    is_custom?: unknown;
    is_multiple_entry?: unknown;
    is_protected?: unknown;
    is_scim?: unknown;
  };
  objs_user: [
    {
      color?: string;
      deleted?: boolean;
      enterprise_user?: definitions["objs_enterprise_user"];
      has_2fa?: boolean;
      id: definitions["defs_user_id"];
      is_admin?: boolean;
      is_app_user: boolean;
      is_bot: boolean;
      is_external?: boolean;
      is_forgotten?: boolean;
      is_invited_user?: boolean;
      is_owner?: boolean;
      is_primary_owner?: boolean;
      is_restricted?: boolean;
      is_stranger?: boolean;
      is_ultra_restricted?: boolean;
      locale?: string;
      name: string;
      presence?: string;
      profile: definitions["objs_user_profile"];
      real_name?: string;
      team?: definitions["defs_workspace_id"];
      team_id?: definitions["defs_workspace_id"];
      team_profile?: {
        fields: definitions["objs_team_profile_field"][];
      };
      two_factor_type?: string;
      tz?: [unknown, string];
      tz_label?: string;
      tz_offset?: number;
      updated: number;
    },
    {
      /** @description refercing to bug: https://jira.tinyspeck.com/browse/EVALUE-1559 */
      color?: string;
      deleted?: boolean;
      enterprise_user?: definitions["objs_enterprise_user"];
      has_2fa?: boolean;
      id: definitions["defs_user_id"];
      is_admin?: boolean;
      is_app_user: boolean;
      is_bot: boolean;
      is_external?: boolean;
      is_forgotten?: boolean;
      is_owner?: boolean;
      is_primary_owner?: boolean;
      is_restricted?: boolean;
      is_stranger?: boolean;
      is_ultra_restricted?: boolean;
      locale?: string;
      name: string;
      presence?: string;
      profile: definitions["objs_user_profile"];
      real_name?: string;
      team_id?: definitions["defs_workspace_id"];
      team_profile?: {
        fields: definitions["objs_team_profile_field"][];
      };
      teams?: definitions["defs_workspace_id"][];
      two_factor_type?: string;
      tz?: [unknown, string];
      tz_label?: string;
      tz_offset?: number;
      updated: number;
    }
  ];
  /** User profile object */
  objs_user_profile: {
    always_active?: boolean;
    api_app_id?: definitions["defs_optional_app_id"];
    avatar_hash: string;
    bot_id?: definitions["defs_bot_id"];
    display_name: string;
    display_name_normalized: string;
    /** Format: email */
    email?: unknown;
    fields: { [key: string]: unknown }[];
    first_name?: unknown;
    guest_expiration_ts?: unknown;
    guest_invited_by?: unknown;
    /** Format: uri */
    image_1024?: unknown;
    /** Format: uri */
    image_192?: unknown;
    /** Format: uri */
    image_24?: unknown;
    /** Format: uri */
    image_32?: unknown;
    /** Format: uri */
    image_48?: unknown;
    /** Format: uri */
    image_512?: unknown;
    /** Format: uri */
    image_72?: unknown;
    /** Format: uri */
    image_original?: unknown;
    is_app_user?: boolean;
    is_custom_image?: boolean;
    is_restricted?: unknown;
    is_ultra_restricted?: unknown;
    last_avatar_image_hash?: string;
    last_name?: unknown;
    memberships_count?: number;
    name?: unknown;
    phone: string;
    pronouns?: string;
    real_name: string;
    real_name_normalized: string;
    skype: string;
    status_default_emoji?: string;
    status_default_text?: string;
    status_default_text_canonical?: unknown;
    status_emoji: string;
    status_expiration?: number;
    status_text: string;
    status_text_canonical?: unknown;
    team?: definitions["defs_workspace_id"];
    title: string;
    updated?: number;
    user_id?: string;
    username?: unknown;
  };
  objs_user_profile_short: {
    avatar_hash: string;
    display_name: string;
    display_name_normalized?: string;
    first_name: unknown;
    /** Format: uri */
    image_72: string;
    is_restricted: boolean;
    is_ultra_restricted: boolean;
    name: string;
    real_name: string;
    real_name_normalized?: string;
    team: definitions["defs_workspace_id"];
  };
}

export interface operations {
  /** Approve an app for installation on a workspace. */
  admin_apps_approve: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.apps:write` */
        token: string;
      };
      formData: {
        /** The id of the app to approve. */
        app_id?: string;
        /** The id of the request to approve. */
        request_id?: string;
        team_id?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** List approved apps for an org or workspace. */
  admin_apps_approved_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `admin.apps:read` */
        token: string;
        /** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */
        limit?: number;
        /** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page */
        cursor?: string;
        team_id?: string;
        enterprise_id?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** List app requests for a team/workspace. */
  admin_apps_requests_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `admin.apps:read` */
        token: string;
        /** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */
        limit?: number;
        /** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page */
        cursor?: string;
        team_id?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Restrict an app for installation on a workspace. */
  admin_apps_restrict: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.apps:write` */
        token: string;
      };
      formData: {
        /** The id of the app to restrict. */
        app_id?: string;
        /** The id of the request to restrict. */
        request_id?: string;
        team_id?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** List restricted apps for an org or workspace. */
  admin_apps_restricted_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `admin.apps:read` */
        token: string;
        /** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */
        limit?: number;
        /** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page */
        cursor?: string;
        team_id?: string;
        enterprise_id?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Archive a public or private channel. */
  admin_conversations_archive: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.conversations:write` */
        token: string;
      };
      formData: {
        /** The channel to archive. */
        channel_id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @enum {string} */
          error:
            | "feature_not_enabled"
            | "channel_not_found"
            | "channel_type_not_supported"
            | "default_org_wide_channel"
            | "already_archived"
            | "cant_archive_general"
            | "restricted_action"
            | "could_not_archive_channel";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Convert a public channel to a private channel. */
  admin_conversations_convertToPrivate: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.conversations:write` */
        token: string;
      };
      formData: {
        /** The channel to convert to private. */
        channel_id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @enum {string} */
          error:
            | "feature_not_enabled"
            | "restricted_action"
            | "name_taken"
            | "channel_not_found"
            | "channel_type_not_supported"
            | "default_org_wide_channel"
            | "method_not_supported_for_channel_type"
            | "could_not_convert_channel"
            | "external_channel_migrating";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Create a public or private channel-based conversation. */
  admin_conversations_create: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.conversations:write` */
        token: string;
      };
      formData: {
        /** Name of the public or private channel to create. */
        name: string;
        /** Description of the public or private channel to create. */
        description?: string;
        /** When `true`, creates a private channel instead of a public channel */
        is_private: boolean;
        /** When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel */
        org_wide?: boolean;
        /** The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`. */
        team_id?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          channel_id?: definitions["defs_channel_id"];
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @enum {string} */
          error:
            | "feature_not_enabled"
            | "name_taken"
            | "restricted_action"
            | "team_not_found"
            | "invalid_team"
            | "invalid_name"
            | "could_not_create_channel"
            | "team_id_or_org_required";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Delete a public or private channel. */
  admin_conversations_delete: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.conversations:write` */
        token: string;
      };
      formData: {
        /** The channel to delete. */
        channel_id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @enum {string} */
          error:
            | "feature_not_enabled"
            | "not_an_admin"
            | "channel_not_found"
            | "channel_type_not_supported"
            | "default_org_wide_channel"
            | "restricted_action"
            | "could_not_delete_channel"
            | "missing_scope";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Disconnect a connected channel from one or more workspaces. */
  admin_conversations_disconnectShared: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.conversations:write` */
        token: string;
      };
      formData: {
        /** The channel to be disconnected from some workspaces. */
        channel_id: string;
        /** The team to be removed from the channel. Currently only a single team id can be specified. */
        leaving_team_ids?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @enum {string} */
          error:
            | "feature_not_enabled"
            | "not_an_admin"
            | "not_an_enterprise"
            | "channel_not_found"
            | "not_supported"
            | "team_not_found"
            | "restricted_action"
            | "missing_scope"
            | "leaving_team_not_in_channel"
            | "no_teams_to_disconnect"
            | "leaving_team_required"
            | "cannot_kick_team"
            | "cannot_kick_home_team";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM. */
  admin_conversations_ekm_listOriginalConnectedChannelInfo: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `admin.conversations:read` */
        token: string;
        /** A comma-separated list of channels to filter to. */
        channel_ids?: string;
        /** A comma-separated list of the workspaces to which the channels you would like returned belong. */
        team_ids?: string;
        /** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */
        limit?: number;
        /** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. */
        cursor?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Get conversation preferences for a public or private channel. */
  admin_conversations_getConversationPrefs: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.conversations:read` */
        token: string;
      };
      query: {
        /** The channel to get preferences for. */
        channel_id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          prefs?: {
            can_thread?: {
              type?: string[];
              user?: string[];
            };
            who_can_post?: {
              type?: string[];
              user?: string[];
            };
          };
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @enum {string} */
          error:
            | "feature_not_enabled"
            | "not_an_admin"
            | "not_an_enterprise"
            | "restricted_action"
            | "missing_scope"
            | "channel_not_found"
            | "channel_type_not_supported"
            | "could_not_get_conversation_prefs";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Get all the workspaces a given public or private channel is connected to within this Enterprise org. */
  admin_conversations_getTeams: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.conversations:read` */
        token: string;
      };
      query: {
        /** The channel to determine connected workspaces within the organization for. */
        channel_id: string;
        /** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page */
        cursor?: string;
        /** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */
        limit?: number;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          response_metadata?: {
            next_cursor: string;
          };
          team_ids: definitions["defs_team"][];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @enum {string} */
          error:
            | "feature_not_enabled"
            | "channel_not_found"
            | "channel_type_not_supported"
            | "unsupported_team_type"
            | "restricted_action"
            | "could_not_get_teams"
            | "invalid_cursor"
            | "invalid_limit";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Invite a user to a public or private channel. */
  admin_conversations_invite: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.conversations:write` */
        token: string;
      };
      formData: {
        /** The users to invite. */
        user_ids: string;
        /** The channel that the users will be invited to. */
        channel_id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @enum {string} */
          error:
            | "feature_not_enabled"
            | "channel_not_found"
            | "channel_type_not_supported"
            | "default_org_wide_channel"
            | "restricted_action"
            | "user_must_be_admin"
            | "failed_for_some_users";
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Rename a public or private channel. */
  admin_conversations_rename: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.conversations:write` */
        token: string;
      };
      formData: {
        /** The channel to rename. */
        channel_id: string;
        name: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @enum {string} */
          error:
            | "feature_not_enabled"
            | "channel_not_found"
            | "channel_type_not_supported"
            | "restricted_action"
            | "could_not_rename_channel"
            | "default_org_wide_channel"
            | "name_taken";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Add an allowlist of IDP groups for accessing a channel */
  admin_conversations_restrictAccess_addGroup: {
    parameters: {
      formData: {
        /** Authentication token. Requires scope: `admin.conversations:write` */
        token: string;
        /** The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. */
        team_id?: string;
        /** The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel. */
        group_id: string;
        /** The channel to link this group to. */
        channel_id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** List all IDP Groups linked to a channel */
  admin_conversations_restrictAccess_listGroups: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `admin.conversations:read` */
        token: string;
        channel_id: string;
        /** The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. */
        team_id?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Remove a linked IDP group linked from a private channel */
  admin_conversations_restrictAccess_removeGroup: {
    parameters: {
      formData: {
        /** Authentication token. Requires scope: `admin.conversations:write` */
        token: string;
        /** The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. */
        team_id: string;
        /** The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel. */
        group_id: string;
        /** The channel to remove the linked group from. */
        channel_id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Search for public or private channels in an Enterprise organization. */
  admin_conversations_search: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.conversations:read` */
        token: string;
      };
      query: {
        /** Comma separated string of team IDs, signifying the workspaces to search through. */
        team_ids?: string;
        /** Name of the the channel to query by. */
        query?: string;
        /** Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. */
        limit?: number;
        /** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. */
        cursor?: string;
        /** The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types). */
        search_channel_types?: string;
        /** Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted */
        sort?: string;
        /** Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a) */
        sort_dir?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          channels: definitions["objs_channel"][];
          next_cursor: string;
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @enum {string} */
          error:
            | "feature_not_enabled"
            | "not_an_admin"
            | "not_an_enterprise"
            | "team_not_found"
            | "not_allowed"
            | "invalid_auth"
            | "invalid_cursor"
            | "invalid_search_channel_type"
            | "invalid_sort"
            | "invalid_sort_dir";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Set the posting permissions for a public or private channel. */
  admin_conversations_setConversationPrefs: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.conversations:write` */
        token: string;
      };
      formData: {
        /** The channel to set the prefs for */
        channel_id: string;
        /** The prefs for this channel in a stringified JSON format. */
        prefs: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @enum {string} */
          error:
            | "feature_not_enabled"
            | "not_an_admin"
            | "channel_not_found"
            | "channel_type_not_supported"
            | "restricted_action"
            | "missing_scope"
            | "could_not_set_channel_pref"
            | "default_org_wide_channel";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Set the workspaces in an Enterprise grid org that connect to a public or private channel. */
  admin_conversations_setTeams: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.conversations:write` */
        token: string;
      };
      formData: {
        /** The encoded `channel_id` to add or remove to workspaces. */
        channel_id: string;
        /** The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. */
        team_id?: string;
        /** A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. */
        target_team_ids?: string;
        /** True if channel has to be converted to an org channel */
        org_channel?: boolean;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Unarchive a public or private channel. */
  admin_conversations_unarchive: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.conversations:write` */
        token: string;
      };
      formData: {
        /** The channel to unarchive. */
        channel_id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @enum {string} */
          error:
            | "feature_not_enabled"
            | "channel_not_found"
            | "channel_not_archived"
            | "channel_type_not_supported"
            | "restricted_action"
            | "could_not_unarchive_channel"
            | "default_org_wide_channel"
            | "missing_scope";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Add an emoji. */
  admin_emoji_add: {
    parameters: {
      formData: {
        /** Authentication token. Requires scope: `admin.teams:write` */
        token: string;
        /** The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included. */
        name: string;
        /** The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best. */
        url: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Add an emoji alias. */
  admin_emoji_addAlias: {
    parameters: {
      formData: {
        /** Authentication token. Requires scope: `admin.teams:write` */
        token: string;
        /** The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included. */
        name: string;
        /** The alias of the emoji. */
        alias_for: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** List emoji for an Enterprise Grid organization. */
  admin_emoji_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `admin.teams:read` */
        token: string;
        /** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page */
        cursor?: string;
        /** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */
        limit?: number;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Remove an emoji across an Enterprise Grid organization */
  admin_emoji_remove: {
    parameters: {
      formData: {
        /** Authentication token. Requires scope: `admin.teams:write` */
        token: string;
        /** The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included. */
        name: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Rename an emoji. */
  admin_emoji_rename: {
    parameters: {
      formData: {
        /** Authentication token. Requires scope: `admin.teams:write` */
        token: string;
        /** The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included. */
        name: string;
        /** The new name of the emoji. */
        new_name: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Approve a workspace invite request. */
  admin_inviteRequests_approve: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.invites:write` */
        token: string;
      };
      formData: {
        /** ID for the workspace where the invite request was made. */
        team_id?: string;
        /** ID of the request to invite. */
        invite_request_id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** List all approved workspace invite requests. */
  admin_inviteRequests_approved_list: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.invites:read` */
        token: string;
      };
      query: {
        /** ID for the workspace where the invite requests were made. */
        team_id?: string;
        /** Value of the `next_cursor` field sent as part of the previous API response */
        cursor?: string;
        /** The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive */
        limit?: number;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** List all denied workspace invite requests. */
  admin_inviteRequests_denied_list: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.invites:read` */
        token: string;
      };
      query: {
        /** ID for the workspace where the invite requests were made. */
        team_id?: string;
        /** Value of the `next_cursor` field sent as part of the previous api response */
        cursor?: string;
        /** The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive */
        limit?: number;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Deny a workspace invite request. */
  admin_inviteRequests_deny: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.invites:write` */
        token: string;
      };
      formData: {
        /** ID for the workspace where the invite request was made. */
        team_id?: string;
        /** ID of the request to invite. */
        invite_request_id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** List all pending workspace invite requests. */
  admin_inviteRequests_list: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.invites:read` */
        token: string;
      };
      query: {
        /** ID for the workspace where the invite requests were made. */
        team_id?: string;
        /** Value of the `next_cursor` field sent as part of the previous API response */
        cursor?: string;
        /** The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive */
        limit?: number;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** List all of the admins on a given workspace. */
  admin_teams_admins_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `admin.teams:read` */
        token: string;
        /** The maximum number of items to return. */
        limit?: number;
        /** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. */
        cursor?: string;
        team_id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Create an Enterprise team. */
  admin_teams_create: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.teams:write` */
        token: string;
      };
      formData: {
        /** Team domain (for example, slacksoftballteam). */
        team_domain: string;
        /** Team name (for example, Slack Softball Team). */
        team_name: string;
        /** Description for the team. */
        team_description?: string;
        /** Who can join the team. A team's discoverability can be `open`, `closed`, `invite_only`, or `unlisted`. */
        team_discoverability?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** List all teams on an Enterprise organization */
  admin_teams_list: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.teams:read` */
        token: string;
      };
      query: {
        /** The maximum number of items to return. Must be between 1 - 100 both inclusive. */
        limit?: number;
        /** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. */
        cursor?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** List all of the owners on a given workspace. */
  admin_teams_owners_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `admin.teams:read` */
        token: string;
        team_id: string;
        /** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */
        limit?: number;
        /** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. */
        cursor?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Fetch information about settings in a workspace */
  admin_teams_settings_info: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.teams:read` */
        token: string;
      };
      query: {
        team_id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Set the default channels of a workspace. */
  admin_teams_settings_setDefaultChannels: {
    parameters: {
      formData: {
        /** Authentication token. Requires scope: `admin.teams:write` */
        token: string;
        /** ID for the workspace to set the default channel for. */
        team_id: string;
        /** An array of channel IDs. */
        channel_ids: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Set the description of a given workspace. */
  admin_teams_settings_setDescription: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.teams:write` */
        token: string;
      };
      formData: {
        /** ID for the workspace to set the description for. */
        team_id: string;
        /** The new description for the workspace. */
        description: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** An API method that allows admins to set the discoverability of a given workspace */
  admin_teams_settings_setDiscoverability: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.teams:write` */
        token: string;
      };
      formData: {
        /** The ID of the workspace to set discoverability on. */
        team_id: string;
        /** This workspace's discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`. */
        discoverability: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Sets the icon of a workspace. */
  admin_teams_settings_setIcon: {
    parameters: {
      formData: {
        /** Authentication token. Requires scope: `admin.teams:write` */
        token: string;
        /** Image URL for the icon */
        image_url: string;
        /** ID for the workspace to set the icon for. */
        team_id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Set the name of a given workspace. */
  admin_teams_settings_setName: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.teams:write` */
        token: string;
      };
      formData: {
        /** ID for the workspace to set the name for. */
        team_id: string;
        /** The new name of the workspace. */
        name: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Add one or more default channels to an IDP group. */
  admin_usergroups_addChannels: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.usergroups:write` */
        token: string;
      };
      formData: {
        /** ID of the IDP group to add default channels for. */
        usergroup_id: string;
        /** The workspace to add default channels in. */
        team_id?: string;
        /** Comma separated string of channel IDs. */
        channel_ids: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response if the token provided is not associated with an Org Admin or Owner */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Associate one or more default workspaces with an organization-wide IDP group. */
  admin_usergroups_addTeams: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.teams:write` */
        token: string;
      };
      formData: {
        /** An encoded usergroup (IDP Group) ID. */
        usergroup_id: string;
        /** A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. */
        team_ids: string;
        /** When `true`, this method automatically creates new workspace accounts for the IDP group members. */
        auto_provision?: boolean;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** List the channels linked to an org-level IDP group (user group). */
  admin_usergroups_listChannels: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.usergroups:read` */
        token: string;
      };
      query: {
        /** ID of the IDP group to list default channels for. */
        usergroup_id: string;
        /** ID of the the workspace. */
        team_id?: string;
        /** Flag to include or exclude the count of members per channel. */
        include_num_members?: boolean;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response if the token provided is not associated with an Org Admin or Owner */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Remove one or more default channels from an org-level IDP group (user group). */
  admin_usergroups_removeChannels: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.usergroups:write` */
        token: string;
      };
      formData: {
        /** ID of the IDP Group */
        usergroup_id: string;
        /** Comma-separated string of channel IDs */
        channel_ids: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response if the token provided is not associated with an Org Admin or Owner */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Add an Enterprise user to a workspace. */
  admin_users_assign: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.users:write` */
        token: string;
      };
      formData: {
        /** The ID (`T1234`) of the workspace. */
        team_id: string;
        /** The ID of the user to add to the workspace. */
        user_id: string;
        /** True if user should be added to the workspace as a guest. */
        is_restricted?: boolean;
        /** True if user should be added to the workspace as a single-channel guest. */
        is_ultra_restricted?: boolean;
        /** Comma separated values of channel IDs to add user in the new workspace. */
        channel_ids?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Invite a user to a workspace. */
  admin_users_invite: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.users:write` */
        token: string;
      };
      formData: {
        /** The ID (`T1234`) of the workspace. */
        team_id: string;
        /** The email address of the person to invite. */
        email: string;
        /** A comma-separated list of `channel_id`s for this user to join. At least one channel is required. */
        channel_ids: string;
        /** An optional message to send to the user in the invite email. */
        custom_message?: string;
        /** Full name of the user. */
        real_name?: string;
        /** Allow this invite to be resent in the future if a user has not signed up yet. (default: false) */
        resend?: boolean;
        /** Is this user a multi-channel guest user? (default: false) */
        is_restricted?: boolean;
        /** Is this user a single channel guest user? (default: false) */
        is_ultra_restricted?: boolean;
        /** Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. */
        guest_expiration_ts?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** List users on a workspace */
  admin_users_list: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.users:read` */
        token: string;
      };
      query: {
        /** The ID (`T1234`) of the workspace. */
        team_id: string;
        /** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. */
        cursor?: string;
        /** Limit for how many users to be retrieved per page */
        limit?: number;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Remove a user from a workspace. */
  admin_users_remove: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.users:write` */
        token: string;
      };
      formData: {
        /** The ID (`T1234`) of the workspace. */
        team_id: string;
        /** The ID of the user to remove. */
        user_id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Invalidate a single session for a user by session_id */
  admin_users_session_invalidate: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.users:write` */
        token: string;
      };
      formData: {
        /** ID of the team that the session belongs to */
        team_id: string;
        session_id: number;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Wipes all valid sessions on all devices for a given user */
  admin_users_session_reset: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.users:write` */
        token: string;
      };
      formData: {
        /** The ID of the user to wipe sessions for */
        user_id: string;
        /** Only expire mobile sessions (default: false) */
        mobile_only?: boolean;
        /** Only expire web sessions (default: false) */
        web_only?: boolean;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Set an existing guest, regular user, or owner to be an admin user. */
  admin_users_setAdmin: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.users:write` */
        token: string;
      };
      formData: {
        /** The ID (`T1234`) of the workspace. */
        team_id: string;
        /** The ID of the user to designate as an admin. */
        user_id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Set an expiration for a guest user */
  admin_users_setExpiration: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.users:write` */
        token: string;
      };
      formData: {
        /** The ID (`T1234`) of the workspace. */
        team_id: string;
        /** The ID of the user to set an expiration for. */
        user_id: string;
        /** Timestamp when guest account should be disabled. */
        expiration_ts: number;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Set an existing guest, regular user, or admin user to be a workspace owner. */
  admin_users_setOwner: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.users:write` */
        token: string;
      };
      formData: {
        /** The ID (`T1234`) of the workspace. */
        team_id: string;
        /** Id of the user to promote to owner. */
        user_id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Set an existing guest user, admin user, or owner to be a regular user. */
  admin_users_setRegular: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `admin.users:write` */
        token: string;
      };
      formData: {
        /** The ID (`T1234`) of the workspace. */
        team_id: string;
        /** The ID of the user to designate as a regular user. */
        user_id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Checks API calling code. */
  api_test: {
    parameters: {
      query: {
        /** Error response to return */
        error?: string;
        /** example property to return */
        foo?: string;
      };
    };
    responses: {
      /** Standard success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: { [key: string]: unknown } };
      };
      /** Artificial error response */
      default: {
        schema: {
          error: string;
          ok: definitions["defs_ok_false"];
        } & { [key: string]: { [key: string]: unknown } };
      };
    };
  };
  /** Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to. */
  apps_event_authorizations_list: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `authorizations:read` */
        token: string;
      };
      query: {
        event_context: string;
        cursor?: string;
        limit?: number;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Returns list of permissions this app has on a team. */
  apps_permissions_info: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `none` */
        token?: string;
      };
    };
    responses: {
      /** Standard success response when used with a user token */
      200: {
        schema: {
          info: {
            app_home: {
              resources?: definitions["objs_resources"];
              scopes?: definitions["objs_scopes"];
            };
            channel: {
              resources?: definitions["objs_resources"];
              scopes?: definitions["objs_scopes"];
            };
            group: {
              resources?: definitions["objs_resources"];
              scopes?: definitions["objs_scopes"];
            };
            im: {
              resources?: definitions["objs_resources"];
              scopes?: definitions["objs_scopes"];
            };
            mpim: {
              resources?: definitions["objs_resources"];
              scopes?: definitions["objs_scopes"];
            };
            team: {
              resources: definitions["objs_resources"];
              scopes: definitions["objs_scopes"];
            };
          };
          ok: definitions["defs_ok_true"];
        };
      };
      /** Standard failure response when used with an invalid token */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Allows an app to request additional scopes */
  apps_permissions_request: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `none` */
        token: string;
        /** A comma separated list of scopes to request for */
        scopes: string;
        /** Token used to trigger the permissions API */
        trigger_id: string;
      };
    };
    responses: {
      /** Standard success response when used with a user token */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Standard failure response when trigger_id is invalid */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "invalid_trigger"
            | "trigger_exchanged"
            | "invalid_scope"
            | "invalid_user"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Returns list of resource grants this app has on a team. */
  apps_permissions_resources_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `none` */
        token: string;
        /** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail. */
        cursor?: string;
        /** The maximum number of items to return. */
        limit?: number;
      };
    };
    responses: {
      /** Typical successful paginated response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          resources: {
            /** An ID for a resource */
            id?: string;
            /** The type of resource the `id` corresponds to */
            type?: string;
          }[];
          response_metadata?: {
            next_cursor: string;
          };
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "invalid_cursor"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Returns list of scopes this app has on a team. */
  apps_permissions_scopes_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `none` */
        token: string;
      };
    };
    responses: {
      /** Typical successful paginated response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          scopes: {
            app_home?: definitions["objs_scopes"];
            channel?: definitions["objs_scopes"];
            group?: definitions["objs_scopes"];
            im?: definitions["objs_scopes"];
            mpim?: definitions["objs_scopes"];
            team?: definitions["objs_scopes"];
            user?: definitions["objs_scopes"];
          } & { [key: string]: unknown };
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Returns list of user grants and corresponding scopes this app has on a team. */
  apps_permissions_users_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `none` */
        token: string;
        /** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail. */
        cursor?: string;
        /** The maximum number of items to return. */
        limit?: number;
      };
    };
    responses: {
      /** Typical successful paginated response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Enables an app to trigger a permissions modal to grant an app access to a user access scope. */
  apps_permissions_users_request: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `none` */
        token: string;
        /** A comma separated list of user scopes to request for */
        scopes: string;
        /** Token used to trigger the request */
        trigger_id: string;
        /** The user this scope is being requested for */
        user: string;
      };
    };
    responses: {
      /** Standard success response when used with a user token */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Standard failure response when trigger_id is invalid */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Uninstalls your app from a workspace. */
  apps_uninstall: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `none` */
        token?: string;
        /** Issued when you created your application. */
        client_id?: string;
        /** Issued when you created your application. */
        client_secret?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "invalid_client_id"
            | "bad_client_secret"
            | "client_id_token_mismatch"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Revokes a token. */
  auth_revoke: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `none` */
        token: string;
        /** Setting this parameter to `1` triggers a _testing mode_ where the specified token will not actually be revoked. */
        test?: boolean;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          revoked: boolean;
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Checks authentication & identity. */
  auth_test: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `none` */
        token: string;
      };
    };
    responses: {
      /** Standard success response when used with a user token */
      200: {
        schema: {
          bot_id?: definitions["defs_bot_id"];
          is_enterprise_install?: boolean;
          ok: definitions["defs_ok_true"];
          team: string;
          team_id: definitions["defs_team"];
          url: string;
          user: string;
          user_id: definitions["defs_user_id"];
        };
      };
      /** Standard failure response when used with an invalid token */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_authed"
            | "invalid_auth"
            | "token_revoked"
            | "account_inactive"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Gets information about a bot user. */
  bots_info: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `users:read` */
        token: string;
        /** Bot user to get info on */
        bot?: string;
      };
    };
    responses: {
      /** When successful, returns bot info by bot ID. */
      200: {
        schema: {
          bot: {
            app_id: definitions["defs_app_id"];
            deleted: boolean;
            icons: {
              /** Format: uri */
              image_36: string;
              /** Format: uri */
              image_48: string;
              /** Format: uri */
              image_72: string;
            };
            id: definitions["defs_bot_id"];
            name: string;
            updated: number;
            user_id?: definitions["defs_user_id"];
          };
          ok: definitions["defs_ok_true"];
        };
      };
      /** When no bot can be found, it returns an error. */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "bot_not_found"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Registers a new Call. */
  calls_add: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `calls:write` */
        token: string;
      };
      formData: {
        /** An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service. */
        external_unique_id: string;
        /** An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object. */
        external_display_id?: string;
        /** The URL required for a client to join the Call. */
        join_url: string;
        /** When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. */
        desktop_app_join_url?: string;
        /** Call start time in UTC UNIX timestamp format */
        date_start?: number;
        /** The name of the Call. */
        title?: string;
        /** The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required. */
        created_by?: string;
        /** The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users). */
        users?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Ends a Call. */
  calls_end: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `calls:write` */
        token: string;
      };
      formData: {
        /** `id` returned when registering the call using the [`calls.add`](/methods/calls.add) method. */
        id: string;
        /** Call duration in seconds */
        duration?: number;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Returns information about a Call. */
  calls_info: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `calls:read` */
        token: string;
      };
      query: {
        /** `id` of the Call returned by the [`calls.add`](/methods/calls.add) method. */
        id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Registers new participants added to a Call. */
  calls_participants_add: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `calls:write` */
        token: string;
      };
      formData: {
        /** `id` returned by the [`calls.add`](/methods/calls.add) method. */
        id: string;
        /** The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users). */
        users: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Registers participants removed from a Call. */
  calls_participants_remove: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `calls:write` */
        token: string;
      };
      formData: {
        /** `id` returned by the [`calls.add`](/methods/calls.add) method. */
        id: string;
        /** The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users). */
        users: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Updates information about a Call. */
  calls_update: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `calls:write` */
        token: string;
      };
      formData: {
        /** `id` returned by the [`calls.add`](/methods/calls.add) method. */
        id: string;
        /** The name of the Call. */
        title?: string;
        /** The URL required for a client to join the Call. */
        join_url?: string;
        /** When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. */
        desktop_app_join_url?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Deletes a message. */
  chat_delete: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `chat:write` */
        token?: string;
      };
      formData: {
        /** Timestamp of the message to be deleted. */
        ts?: number;
        /** Channel containing the message to be deleted. */
        channel?: string;
        /** Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope. */
        as_user?: boolean;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          channel: definitions["defs_channel"];
          ok: definitions["defs_ok_true"];
          ts: definitions["defs_ts"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "message_not_found"
            | "channel_not_found"
            | "cant_delete_message"
            | "compliance_exports_prevent_deletion"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Deletes a pending scheduled message from the queue. */
  chat_deleteScheduledMessage: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `chat:write` */
        token: string;
      };
      formData: {
        /** Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope. */
        as_user?: boolean;
        /** The channel the scheduled_message is posting to */
        channel: string;
        /** `scheduled_message_id` returned from call to chat.scheduleMessage */
        scheduled_message_id: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response if no message is found */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "invalid_scheduled_message_id"
            | "channel_not_found"
            | "bad_token"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "ekm_access_denied"
            | "missing_scope"
            | "invalid_arguments"
            | "invalid_arg_name"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Retrieve a permalink URL for a specific extant message */
  chat_getPermalink: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `none` */
        token: string;
        /** The ID of the conversation or channel containing the message */
        channel: string;
        /** A message's `ts` value, uniquely identifying it within a channel */
        message_ts: string;
      };
    };
    responses: {
      /** Standard success response */
      200: {
        schema: {
          channel: definitions["defs_channel"];
          ok: definitions["defs_ok_true"];
          /** Format: uri */
          permalink: string;
        };
      };
      /** Error response when channel cannot be found */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "channel_not_found"
            | "message_not_found"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Share a me message into a channel. */
  chat_meMessage: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `chat:write` */
        token?: string;
      };
      formData: {
        /** Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name. */
        channel?: string;
        /** Text of the message to send. */
        text?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          channel?: definitions["defs_channel"];
          ok: definitions["defs_ok_true"];
          ts?: definitions["defs_ts"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "channel_not_found"
            | "not_in_channel"
            | "is_archived"
            | "msg_too_long"
            | "no_text"
            | "rate_limited"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Sends an ephemeral message to a user in a channel. */
  chat_postEphemeral: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `chat:write` */
        token: string;
      };
      formData: {
        /** Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false. */
        as_user?: boolean;
        /** A JSON-based array of structured attachments, presented as a URL-encoded string. */
        attachments?: string;
        /** A JSON-based array of structured blocks, presented as a URL-encoded string. */
        blocks?: string;
        /** Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. */
        channel: string;
        /** Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below. */
        icon_emoji?: string;
        /** URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below. */
        icon_url?: string;
        /** Find and link channel names and usernames. */
        link_names?: boolean;
        /** Change how messages are treated. Defaults to `none`. See [below](#formatting). */
        parse?: string;
        /** How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. */
        text?: string;
        /** Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread. */
        thread_ts?: string;
        /** `id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument. */
        user: string;
        /** Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below. */
        username?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          message_ts: definitions["defs_ts"];
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "channel_not_found"
            | "is_archived"
            | "msg_too_long"
            | "no_text"
            | "restricted_action"
            | "too_many_attachments"
            | "user_not_in_channel"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Sends a message to a channel. */
  chat_postMessage: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `chat:write` */
        token: string;
      };
      formData: {
        /** Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below. */
        as_user?: string;
        /** A JSON-based array of structured attachments, presented as a URL-encoded string. */
        attachments?: string;
        /** A JSON-based array of structured blocks, presented as a URL-encoded string. */
        blocks?: string;
        /** Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. */
        channel: string;
        /** Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below. */
        icon_emoji?: string;
        /** URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below. */
        icon_url?: string;
        /** Find and link channel names and usernames. */
        link_names?: boolean;
        /** Disable Slack markup parsing by setting to `false`. Enabled by default. */
        mrkdwn?: boolean;
        /** Change how messages are treated. Defaults to `none`. See [below](#formatting). */
        parse?: string;
        /** Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`. */
        reply_broadcast?: boolean;
        /** How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. */
        text?: string;
        /** Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead. */
        thread_ts?: string;
        /** Pass true to enable unfurling of primarily text-based content. */
        unfurl_links?: boolean;
        /** Pass false to disable unfurling of media content. */
        unfurl_media?: boolean;
        /** Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below. */
        username?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          channel: definitions["defs_channel"];
          message: definitions["objs_message"];
          ok: definitions["defs_ok_true"];
          ts: definitions["defs_ts"];
        };
      };
      /** Typical error response if too many attachments are included */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "channel_not_found"
            | "not_in_channel"
            | "is_archived"
            | "msg_too_long"
            | "no_text"
            | "too_many_attachments"
            | "rate_limited"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Schedules a message to be sent to a channel. */
  chat_scheduleMessage: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `chat:write` */
        token?: string;
      };
      formData: {
        /** Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. */
        channel?: string;
        /** How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. */
        text?: string;
        /** Unix EPOCH timestamp of time in future to send the message. */
        post_at?: string;
        /** Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting). */
        parse?: string;
        /** Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship). */
        as_user?: boolean;
        /** Find and link channel names and usernames. */
        link_names?: boolean;
        /** A JSON-based array of structured attachments, presented as a URL-encoded string. */
        attachments?: string;
        /** A JSON-based array of structured blocks, presented as a URL-encoded string. */
        blocks?: string;
        /** Pass true to enable unfurling of primarily text-based content. */
        unfurl_links?: boolean;
        /** Pass false to disable unfurling of media content. */
        unfurl_media?: boolean;
        /** Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead. */
        thread_ts?: number;
        /** Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`. */
        reply_broadcast?: boolean;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          channel: definitions["defs_channel"];
          message: {
            bot_id: definitions["defs_bot_id"];
            bot_profile?: definitions["objs_bot_profile"];
            team: definitions["defs_team"];
            text: string;
            type: string;
            user: definitions["defs_user_id"];
            username?: string;
          };
          ok: definitions["defs_ok_true"];
          post_at: number;
          /** Scheduled Message ID */
          scheduled_message_id: string;
        };
      };
      /** Typical error response if the `post_at` is invalid (ex. in the past or too far into the future) */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "invalid_time"
            | "time_in_past"
            | "time_too_far"
            | "channel_not_found"
            | "not_in_channel"
            | "is_archived"
            | "msg_too_long"
            | "no_text"
            | "restricted_action"
            | "restricted_action_read_only_channel"
            | "restricted_action_thread_only_channel"
            | "restricted_action_non_threadable_channel"
            | "too_many_attachments"
            | "rate_limited"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "ekm_access_denied"
            | "missing_scope"
            | "invalid_arguments"
            | "invalid_arg_name"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Returns a list of scheduled messages. */
  chat_scheduledMessages_list: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `none` */
        token?: string;
      };
      query: {
        /** The channel of the scheduled messages */
        channel?: string;
        /** A UNIX timestamp of the latest value in the time range */
        latest?: number;
        /** A UNIX timestamp of the oldest value in the time range */
        oldest?: number;
        /** Maximum number of original entries to return. */
        limit?: number;
        /** For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from. */
        cursor?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          response_metadata: {
            next_cursor: string;
          };
          scheduled_messages: {
            channel_id: definitions["defs_channel_id"];
            date_created: number;
            id: string;
            post_at: number;
            text?: string;
          }[];
        };
      };
      /** Typical error response if the channel passed is invalid */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "invalid_channel"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "ekm_access_denied"
            | "missing_scope"
            | "invalid_arguments"
            | "invalid_arg_name"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Provide custom unfurl behavior for user-posted URLs */
  chat_unfurl: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `links:write` */
        token: string;
      };
      formData: {
        /** Channel ID of the message */
        channel: string;
        /** Timestamp of the message to add unfurl behavior to. */
        ts: string;
        /** URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. */
        unfurls?: string;
        /** Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior */
        user_auth_message?: string;
        /** Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain */
        user_auth_required?: boolean;
        /** Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded. */
        user_auth_url?: string;
      };
    };
    responses: {
      /** Typical, minimal success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "cannot_unfurl_url"
            | "cannot_find_service"
            | "missing_unfurls"
            | "cannot_prompt"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Updates a message. */
  chat_update: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `chat:write` */
        token: string;
      };
      formData: {
        /** Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users. */
        as_user?: string;
        /** A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field. */
        attachments?: string;
        /** A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field. */
        blocks?: string;
        /** Channel containing the message to be updated. */
        channel: string;
        /** Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`. */
        link_names?: string;
        /** Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`. */
        parse?: string;
        /** New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`. */
        text?: string;
        /** Timestamp of the message to be updated. */
        ts: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          channel: string;
          /** Message object */
          message: {
            attachments?: { [key: string]: unknown }[];
            blocks?: { [key: string]: unknown };
            text: string;
          };
          ok: definitions["defs_ok_true"];
          text: string;
          ts: string;
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "message_not_found"
            | "cant_update_message"
            | "channel_not_found"
            | "edit_window_closed"
            | "msg_too_long"
            | "too_many_attachments"
            | "rate_limited"
            | "no_text"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "request_timeout"
            | "invalid_json"
            | "json_not_object"
            | "upgrade_required"
            | "fatal_error"
            | "is_inactive";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Archives a conversation. */
  conversations_archive: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `conversations:write` */
        token?: string;
      };
      formData: {
        /** ID of conversation to archive */
        channel?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "method_not_supported_for_channel_type"
            | "missing_scope"
            | "not_supported"
            | "channel_not_found"
            | "already_archived"
            | "cant_archive_general"
            | "restricted_action"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "user_is_bot"
            | "user_is_restricted"
            | "user_is_ultra_restricted"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "team_added_to_org"
            | "missing_charset"
            | "superfluous_charset";
          needed?: string;
          ok: definitions["defs_ok_false"];
          provided?: string;
        };
      };
    };
  };
  /** Closes a direct message or multi-person direct message. */
  conversations_close: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `conversations:write` */
        token?: string;
      };
      formData: {
        /** Conversation to close. */
        channel?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          already_closed?: boolean;
          no_op?: boolean;
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "method_not_supported_for_channel_type"
            | "channel_not_found"
            | "user_does_not_own_channel"
            | "missing_scope"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          needed?: string;
          ok: definitions["defs_ok_false"];
          provided?: string;
        };
      };
    };
  };
  /** Initiates a public or private channel-based conversation */
  conversations_create: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `conversations:write` */
        token?: string;
      };
      formData: {
        /** Name of the public or private channel to create */
        name?: string;
        /** Create a private channel instead of a public one */
        is_private?: boolean;
      };
    };
    responses: {
      /** If successful, the command returns a rather stark [conversation object](/types/conversation) */
      200: {
        schema: {
          channel: definitions["objs_conversation"];
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response when name already in use */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          detail?: string;
          /** @enum {string} */
          error:
            | "method_not_supported_for_channel_type"
            | "missing_scope"
            | "name_taken"
            | "restricted_action"
            | "no_channel"
            | "invalid_name_required"
            | "invalid_name_punctuation"
            | "invalid_name_maxlength"
            | "invalid_name_specials"
            | "invalid_name"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "user_is_bot"
            | "user_is_restricted"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          needed?: string;
          ok: definitions["defs_ok_false"];
          provided?: string;
        };
      };
    };
  };
  /** Fetches a conversation's history of messages and events. */
  conversations_history: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `conversations:history` */
        token?: string;
        /** Conversation ID to fetch history for. */
        channel?: string;
        /** End of time range of messages to include in results. */
        latest?: number;
        /** Start of time range of messages to include in results. */
        oldest?: number;
        /** Include messages with latest or oldest timestamp in results only when either timestamp is specified. */
        inclusive?: boolean;
        /** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. */
        limit?: number;
        /** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail. */
        cursor?: string;
      };
    };
    responses: {
      /** Typical success response containing a channel's messages */
      200: {
        schema: {
          channel_actions_count: number;
          channel_actions_ts: [number, unknown];
          has_more: boolean;
          messages: definitions["objs_message"][];
          ok: definitions["defs_ok_true"];
          pin_count: number;
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "missing_scope"
            | "channel_not_found"
            | "invalid_ts_latest"
            | "invalid_ts_oldest"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          needed?: string;
          ok: definitions["defs_ok_false"];
          provided?: string;
        };
      };
    };
  };
  /** Retrieve information about a conversation. */
  conversations_info: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `conversations:read` */
        token?: string;
        /** Conversation ID to learn more about */
        channel?: string;
        /** Set this to `true` to receive the locale for this conversation. Defaults to `false` */
        include_locale?: boolean;
        /** Set to `true` to include the member count for the specified conversation. Defaults to `false` */
        include_num_members?: boolean;
      };
    };
    responses: {
      /** Typical success response for a public channel. (Also, a response from a private channel and a multi-party IM is very similar to this example.) */
      200: {
        schema: {
          channel: definitions["objs_conversation"];
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response when a channel cannot be found */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "missing_scope"
            | "channel_not_found"
            | "team_added_to_org"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          needed?: string;
          ok: definitions["defs_ok_false"];
          provided?: string;
        };
      };
    };
  };
  /** Invites users to a channel. */
  conversations_invite: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `conversations:write` */
        token?: string;
      };
      formData: {
        /** The ID of the public or private channel to invite user(s) to. */
        channel?: string;
        /** A comma separated list of user IDs. Up to 1000 users may be listed. */
        users?: string;
      };
    };
    responses: {
      /** Typical success response when an invitation is extended */
      200: {
        schema: {
          channel: definitions["objs_conversation"];
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response when an invite is attempted on a conversation type that does not support it */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error?:
            | "method_not_supported_for_channel_type"
            | "missing_scope"
            | "channel_not_found"
            | "user_not_found"
            | "no_user"
            | "cant_invite_self"
            | "not_in_channel"
            | "already_in_channel"
            | "is_archived"
            | "cant_invite"
            | "too_many_users"
            | "ura_max_channels"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "user_is_bot"
            | "user_is_restricted"
            | "user_is_ultra_restricted"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "team_added_to_org"
            | "missing_charset"
            | "superfluous_charset";
          /** errors is returned when an error associates an user */
          errors?: {
            /** @enum {string} */
            error:
              | "method_not_supported_for_channel_type"
              | "missing_scope"
              | "channel_not_found"
              | "user_not_found"
              | "no_user"
              | "cant_invite_self"
              | "not_in_channel"
              | "already_in_channel"
              | "is_archived"
              | "cant_invite"
              | "too_many_users"
              | "ura_max_channels"
              | "not_authed"
              | "invalid_auth"
              | "account_inactive"
              | "user_is_bot"
              | "user_is_restricted"
              | "user_is_ultra_restricted"
              | "invalid_arg_name"
              | "invalid_array_arg"
              | "invalid_charset"
              | "invalid_form_data"
              | "invalid_post_type"
              | "missing_post_type"
              | "invalid_json"
              | "json_not_object"
              | "request_timeout"
              | "upgrade_required"
              | "team_added_to_org"
              | "missing_charset"
              | "superfluous_charset";
            ok: definitions["defs_ok_false"];
            user?: definitions["defs_user_id"];
          }[];
          needed?: string;
          ok: definitions["defs_ok_false"];
          provided?: string;
        };
      };
    };
  };
  /** Joins an existing conversation. */
  conversations_join: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `channels:write` */
        token?: string;
      };
      formData: {
        /** ID of conversation to join */
        channel?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          channel: definitions["objs_conversation"];
          ok: definitions["defs_ok_true"];
          /** Response metadata */
          response_metadata?: {
            warnings?: string[];
          };
          warning?: string;
        };
      };
      /** Typical error response if the conversation is archived and cannot be joined */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "method_not_supported_for_channel_type"
            | "missing_scope"
            | "channel_not_found"
            | "is_archived"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "user_is_bot"
            | "user_is_restricted"
            | "user_is_ultra_restricted"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "team_added_to_org"
            | "missing_charset"
            | "superfluous_charset";
          needed?: string;
          ok: definitions["defs_ok_false"];
          provided?: string;
        };
      };
    };
  };
  /** Removes a user from a conversation. */
  conversations_kick: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `conversations:write` */
        token?: string;
      };
      formData: {
        /** ID of conversation to remove user from. */
        channel?: string;
        /** User ID to be removed. */
        user?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response when you attempt to kick yourself from a channel */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "method_not_supported_for_channel_type"
            | "missing_scope"
            | "channel_not_found"
            | "user_not_found"
            | "cant_kick_self"
            | "not_in_channel"
            | "cant_kick_from_general"
            | "restricted_action"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "user_is_bot"
            | "user_is_restricted"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          needed?: string;
          ok: definitions["defs_ok_false"];
          provided?: string;
        };
      };
    };
  };
  /** Leaves a conversation. */
  conversations_leave: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `conversations:write` */
        token?: string;
      };
      formData: {
        /** Conversation to leave */
        channel?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          /** @enum {boolean} */
          not_in_channel?: true;
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response when attempting to leave a workspace's "general" channel */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "method_not_supported_for_channel_type"
            | "last_member"
            | "missing_scope"
            | "channel_not_found"
            | "is_archived"
            | "cant_leave_general"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "user_is_bot"
            | "user_is_restricted"
            | "user_is_ultra_restricted"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "team_added_to_org"
            | "missing_charset"
            | "superfluous_charset";
          needed?: string;
          ok: definitions["defs_ok_false"];
          provided?: string;
        };
      };
    };
  };
  /** Lists all channels in a Slack team. */
  conversations_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `conversations:read` */
        token?: string;
        /** Set to `true` to exclude archived channels from the list */
        exclude_archived?: boolean;
        /** Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im` */
        types?: string;
        /** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000. */
        limit?: number;
        /** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail. */
        cursor?: string;
      };
    };
    responses: {
      /** Typical success response with only public channels */
      200: {
        schema: {
          channels: definitions["objs_conversation"][];
          ok: definitions["defs_ok_true"];
          response_metadata?: {
            next_cursor: string;
          };
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "missing_scope"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          needed?: string;
          ok: definitions["defs_ok_false"];
          provided?: string;
        };
      };
    };
  };
  /** Sets the read cursor in a channel. */
  conversations_mark: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `conversations:write` */
        token?: string;
      };
      formData: {
        /** Channel or conversation to set the read cursor for. */
        channel?: string;
        /** Unique identifier of message you want marked as most recently seen in this conversation. */
        ts?: number;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "method_not_supported_for_channel_type"
            | "missing_scope"
            | "channel_not_found"
            | "invalid_timestamp"
            | "not_in_channel"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "not_allowed_token_type";
          needed?: string;
          ok: definitions["defs_ok_false"];
          provided?: string;
        };
      };
    };
  };
  /** Retrieve members of a conversation. */
  conversations_members: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `conversations:read` */
        token?: string;
        /** ID of the conversation to retrieve members for */
        channel?: string;
        /** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. */
        limit?: number;
        /** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail. */
        cursor?: string;
      };
    };
    responses: {
      /** Typical paginated success response */
      200: {
        schema: {
          members: definitions["defs_user_id"][];
          ok: definitions["defs_ok_true"];
          response_metadata: {
            next_cursor: string;
          };
        };
      };
      /** Typical error response when an invalid cursor is provided */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "channel_not_found"
            | "invalid_limit"
            | "invalid_cursor"
            | "fetch_members_failed"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Opens or resumes a direct message or multi-person direct message. */
  conversations_open: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `conversations:write` */
        token?: string;
      };
      formData: {
        /** Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead. */
        channel?: string;
        /** Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`. */
        users?: string;
        /** Boolean, indicates you want the full IM channel definition in the response. */
        return_im?: boolean;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          already_open?: boolean;
          channel: [
            definitions["objs_conversation"],
            {
              created?: string;
              id: definitions["defs_dm_id"];
              is_im?: boolean;
              is_open?: boolean;
              last_read?: definitions["defs_ts"];
              latest?: definitions["objs_message"];
              unread_count?: number;
              unread_count_display?: number;
              user?: definitions["defs_user_id"];
            }
          ];
          no_op?: boolean;
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "method_not_supported_for_channel_type"
            | "user_not_found"
            | "user_not_visible"
            | "user_disabled"
            | "users_list_not_supplied"
            | "not_enough_users"
            | "too_many_users"
            | "invalid_user_combination"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "channel_not_found";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Renames a conversation. */
  conversations_rename: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `conversations:write` */
        token?: string;
      };
      formData: {
        /** ID of conversation to rename */
        channel?: string;
        /** New name for conversation. */
        name?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          channel: definitions["objs_conversation"];
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response when the calling user is not a member of the conversation */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "user_is_restricted"
            | "method_not_supported_for_channel_type"
            | "missing_scope"
            | "channel_not_found"
            | "not_in_channel"
            | "not_authorized"
            | "invalid_name"
            | "name_taken"
            | "invalid_name_required"
            | "invalid_name_punctuation"
            | "invalid_name_maxlength"
            | "invalid_name_specials"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          needed?: string;
          ok: definitions["defs_ok_false"];
          provided?: string;
        };
      };
    };
  };
  /** Retrieve a thread of messages posted to a conversation */
  conversations_replies: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `conversations:history` */
        token?: string;
        /** Conversation ID to fetch thread from. */
        channel?: string;
        /** Unique identifier of a thread's parent message. `ts` must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by `ts` will return - it is just an ordinary, unthreaded message. */
        ts?: number;
        /** End of time range of messages to include in results. */
        latest?: number;
        /** Start of time range of messages to include in results. */
        oldest?: number;
        /** Include messages with latest or oldest timestamp in results only when either timestamp is specified. */
        inclusive?: boolean;
        /** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. */
        limit?: number;
        /** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail. */
        cursor?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          has_more?: boolean;
          messages: [
            {
              last_read?: definitions["defs_ts"];
              latest_reply?: definitions["defs_ts"];
              reply_count: number;
              reply_users?: definitions["defs_user_id"][];
              reply_users_count?: number;
              source_team?: definitions["defs_team"];
              subscribed: boolean;
              team?: definitions["defs_team"];
              text: string;
              thread_ts: definitions["defs_ts"];
              ts: definitions["defs_ts"];
              type: string;
              unread_count?: number;
              user: definitions["defs_user_id"];
              user_profile?: definitions["objs_user_profile_short"];
              user_team?: definitions["defs_team"];
            },
            {
              is_starred?: boolean;
              parent_user_id: definitions["defs_user_id"];
              source_team?: definitions["defs_team"];
              team?: definitions["defs_team"];
              text: string;
              thread_ts: definitions["defs_ts"];
              ts: definitions["defs_ts"];
              type: string;
              user: definitions["defs_user_id"];
              user_profile?: definitions["objs_user_profile_short"];
              user_team?: definitions["defs_team"];
            }
          ][];
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "missing_scope"
            | "channel_not_found"
            | "thread_not_found"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          needed?: string;
          ok: definitions["defs_ok_false"];
          provided?: string;
        };
      };
    };
  };
  /** Sets the purpose for a conversation. */
  conversations_setPurpose: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `conversations:write` */
        token?: string;
      };
      formData: {
        /** Conversation to set the purpose of */
        channel?: string;
        /** A new, specialer purpose */
        purpose?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          channel: definitions["objs_conversation"];
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "method_not_supported_for_channel_type"
            | "missing_scope"
            | "channel_not_found"
            | "not_in_channel"
            | "is_archived"
            | "too_long"
            | "user_is_restricted"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          needed?: string;
          ok: definitions["defs_ok_false"];
          provided?: string;
        };
      };
    };
  };
  /** Sets the topic for a conversation. */
  conversations_setTopic: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `conversations:write` */
        token?: string;
      };
      formData: {
        /** Conversation to set the topic of */
        channel?: string;
        /** The new topic string. Does not support formatting or linkification. */
        topic?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          channel: definitions["objs_conversation"];
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "method_not_supported_for_channel_type"
            | "missing_scope"
            | "channel_not_found"
            | "not_in_channel"
            | "is_archived"
            | "too_long"
            | "user_is_restricted"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          needed?: string;
          ok: definitions["defs_ok_false"];
          provided?: string;
        };
      };
    };
  };
  /** Reverses conversation archival. */
  conversations_unarchive: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `conversations:write` */
        token?: string;
      };
      formData: {
        /** ID of conversation to unarchive */
        channel?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "method_not_supported_for_channel_type"
            | "missing_scope"
            | "channel_not_found"
            | "not_archived"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "user_is_bot"
            | "user_is_restricted"
            | "user_is_ultra_restricted"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "team_added_to_org"
            | "missing_charset"
            | "superfluous_charset";
          needed?: string;
          ok: definitions["defs_ok_false"];
          provided?: string;
        };
      };
    };
  };
  /** Open a dialog with a user */
  dialog_open: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `none` */
        token: string;
      };
      query: {
        /** The dialog definition. This must be a JSON-encoded string. */
        dialog: string;
        /** Exchange a trigger to post to the user. */
        trigger_id: string;
      };
    };
    responses: {
      /** Typical success response is quite minimal. */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response, before getting to any possible validation errors. */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "validation_errors"
            | "missing_trigger"
            | "missing_dialog"
            | "trigger_exchanged"
            | "trigger_expired"
            | "invalid_trigger"
            | "app_missing_action_url"
            | "cannot_create_dialog"
            | "failed_sending_dialog"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Ends the current user's Do Not Disturb session immediately. */
  dnd_endDnd: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `dnd:write` */
        token: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "unknown_error"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Ends the current user's snooze mode immediately. */
  dnd_endSnooze: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `dnd:write` */
        token: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          dnd_enabled: boolean;
          next_dnd_end_ts: number;
          next_dnd_start_ts: number;
          ok: definitions["defs_ok_true"];
          snooze_enabled: boolean;
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "snooze_not_active"
            | "snooze_end_failed"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Retrieves a user's current Do Not Disturb status. */
  dnd_info: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `dnd:read` */
        token?: string;
        /** User to fetch status for (defaults to current user) */
        user?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          dnd_enabled: boolean;
          next_dnd_end_ts: number;
          next_dnd_start_ts: number;
          ok: definitions["defs_ok_true"];
          snooze_enabled?: boolean;
          snooze_endtime?: number;
          snooze_remaining?: number;
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "user_not_found"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Turns on Do Not Disturb mode for the current user, or changes its duration. */
  dnd_setSnooze: {
    parameters: {
      formData: {
        /** Authentication token. Requires scope: `dnd:write` */
        token: string;
        /** Number of minutes, from now, to snooze until. */
        num_minutes: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          snooze_enabled: boolean;
          snooze_endtime: number;
          snooze_remaining: number;
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "missing_duration"
            | "snooze_failed"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "too_long"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Retrieves the Do Not Disturb status for up to 50 users on a team. */
  dnd_teamInfo: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `dnd:read` */
        token?: string;
        /** Comma-separated list of users to fetch Do Not Disturb status for */
        users?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Lists custom emoji for a team. */
  emoji_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `emoji:read` */
        token: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Deletes an existing comment on a file. */
  files_comments_delete: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `files:write:user` */
        token?: string;
      };
      formData: {
        /** File to delete a comment from. */
        file?: string;
        /** The comment to delete. */
        id?: string;
      };
    };
    responses: {
      /** Standard success response is very simple */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Standard failure response when used with an invalid token */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "cant_delete"
            | "comment_not_found"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "no_permission"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Deletes a file. */
  files_delete: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `files:write:user` */
        token?: string;
      };
      formData: {
        /** ID of file to delete. */
        file?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "file_not_found"
            | "file_deleted"
            | "cant_delete_file"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "no_permission"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Gets information about a file. */
  files_info: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `files:read` */
        token?: string;
        /** Specify a file by providing its ID. */
        file?: string;
        count?: string;
        page?: string;
        /** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. */
        limit?: number;
        /** Parameter for pagination. File comments are paginated for a single file. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection of comments. See [pagination](/docs/pagination) for more details. */
        cursor?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          comments: definitions["objs_comments"];
          content_html?: unknown;
          editor?: definitions["defs_user_id"];
          file: definitions["objs_file"];
          ok: definitions["defs_ok_true"];
          paging?: definitions["objs_paging"];
          response_metadata?: definitions["objs_response_metadata"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "file_not_found"
            | "file_deleted"
            | "timezone_count_failed"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "no_permission"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** List for a team, in a channel, or from a user with applied filters. */
  files_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `files:read` */
        token?: string;
        /** Filter files created by a single user. */
        user?: string;
        /** Filter files appearing in a specific channel, indicated by its ID. */
        channel?: string;
        /** Filter files created after this timestamp (inclusive). */
        ts_from?: number;
        /** Filter files created before this timestamp (inclusive). */
        ts_to?: number;
        /** Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list. */
        types?: string;
        count?: string;
        page?: string;
        /** Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit. */
        show_files_hidden_by_limit?: boolean;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          files: definitions["objs_file"][];
          ok: definitions["defs_ok_true"];
          paging: definitions["objs_paging"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "user_not_found"
            | "unknown_type"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "no_permission"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Adds a file from a remote service */
  files_remote_add: {
    parameters: {
      formData: {
        /** Authentication token. Requires scope: `remote_files:write` */
        token?: string;
        /** Creator defined GUID for the file. */
        external_id?: string;
        /** Title of the file being shared. */
        title?: string;
        /** type of file */
        filetype?: string;
        /** URL of the remote file. */
        external_url?: string;
        /** Preview of the document via `multipart/form-data`. */
        preview_image?: string;
        /** A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. */
        indexable_file_contents?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Retrieve information about a remote file added to Slack */
  files_remote_info: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `remote_files:read` */
        token?: string;
        /** Specify a file by providing its ID. */
        file?: string;
        /** Creator defined GUID for the file. */
        external_id?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Retrieve information about a remote file added to Slack */
  files_remote_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `remote_files:read` */
        token?: string;
        /** Filter files appearing in a specific channel, indicated by its ID. */
        channel?: string;
        /** Filter files created after this timestamp (inclusive). */
        ts_from?: number;
        /** Filter files created before this timestamp (inclusive). */
        ts_to?: number;
        /** The maximum number of items to return. */
        limit?: number;
        /** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail. */
        cursor?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Remove a remote file. */
  files_remote_remove: {
    parameters: {
      formData: {
        /** Authentication token. Requires scope: `remote_files:write` */
        token?: string;
        /** Specify a file by providing its ID. */
        file?: string;
        /** Creator defined GUID for the file. */
        external_id?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Share a remote file into a channel. */
  files_remote_share: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `remote_files:share` */
        token?: string;
        /** Specify a file registered with Slack by providing its ID. Either this field or `external_id` or both are required. */
        file?: string;
        /** The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or `file` or both are required. */
        external_id?: string;
        /** Comma-separated list of channel IDs where the file will be shared. */
        channels?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Updates an existing remote file. */
  files_remote_update: {
    parameters: {
      formData: {
        /** Authentication token. Requires scope: `remote_files:write` */
        token?: string;
        /** Specify a file by providing its ID. */
        file?: string;
        /** Creator defined GUID for the file. */
        external_id?: string;
        /** Title of the file being shared. */
        title?: string;
        /** type of file */
        filetype?: string;
        /** URL of the remote file. */
        external_url?: string;
        /** Preview of the document via `multipart/form-data`. */
        preview_image?: string;
        /** File containing contents that can be used to improve searchability for the remote file. */
        indexable_file_contents?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Revokes public/external sharing access for a file */
  files_revokePublicURL: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `files:write:user` */
        token?: string;
      };
      formData: {
        /** File to revoke */
        file?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          file: definitions["objs_file"];
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "file_not_found"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "user_is_restricted"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Enables a file for public/external sharing. */
  files_sharedPublicURL: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `files:write:user` */
        token?: string;
      };
      formData: {
        /** File to share */
        file?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          file: definitions["objs_file"];
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "file_not_found"
            | "not_allowed"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "user_is_restricted"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Uploads or creates a file. */
  files_upload: {
    parameters: {
      formData: {
        /** Authentication token. Requires scope: `files:write:user` */
        token?: string;
        /** File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`. */
        file?: string;
        /** File contents via a POST variable. If omitting this parameter, you must provide a `file`. */
        content?: string;
        /** A [file type](/types/file#file_types) identifier. */
        filetype?: string;
        /** Filename of file. */
        filename?: string;
        /** Title of file. */
        title?: string;
        /** The message text introducing the file in specified `channels`. */
        initial_comment?: string;
        /** Comma-separated list of channel names or IDs where the file will be shared. */
        channels?: string;
        /** Provide another message's `ts` value to upload this file as a reply. Never use a reply's `ts` value; use its parent instead. */
        thread_ts?: number;
      };
    };
    responses: {
      /** Success response after uploading a file to a channel with an initial message */
      200: {
        schema: {
          file: definitions["objs_file"];
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "posting_to_general_channel_denied"
            | "invalid_channel"
            | "file_uploads_disabled"
            | "file_uploads_except_images_disabled"
            | "storage_limit_reached"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "no_permission"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** For Enterprise Grid workspaces, map local user IDs to global user IDs */
  migration_exchange: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `tokens.basic` */
        token: string;
        /** A comma-separated list of user ids, up to 400 per request */
        users: string;
        /** Specify team_id starts with `T` in case of Org Token */
        team_id?: string;
        /** Specify `true` to convert `W` global user IDs to workspace-specific `U` IDs. Defaults to `false`. */
        to_old?: boolean;
      };
    };
    responses: {
      /** Typical success response when mappings exist for the specified user IDs */
      200: {
        schema: {
          /** The enterprise grid organization ID containing the workspace/team. */
          enterprise_id: string;
          /** A list of User IDs that cannot be mapped or found */
          invalid_user_ids?: string[];
          ok: definitions["defs_ok_true"];
          team_id: definitions["defs_team"];
          /** A mapping of provided user IDs with mapped user IDs */
          user_id_map?: { [key: string]: unknown };
        } & { [key: string]: unknown };
      };
      /** Typical error response when there are no mappings to provide */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_enterprise_team"
            | "too_many_users"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Exchanges a temporary OAuth verifier code for an access token. */
  oauth_access: {
    parameters: {
      query: {
        /** Issued when you created your application. */
        client_id?: string;
        /** Issued when you created your application. */
        client_secret?: string;
        /** The `code` param returned via the OAuth callback. */
        code?: string;
        /** This must match the originally submitted URI (if one was sent). */
        redirect_uri?: string;
        /** Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps). */
        single_channel?: boolean;
      };
    };
    responses: {
      /** Successful user token negotiation for a single scope */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Exchanges a temporary OAuth verifier code for a workspace token. */
  oauth_token: {
    parameters: {
      query: {
        /** Issued when you created your application. */
        client_id?: string;
        /** Issued when you created your application. */
        client_secret?: string;
        /** The `code` param returned via the OAuth callback. */
        code?: string;
        /** This must match the originally submitted URI (if one was sent). */
        redirect_uri?: string;
        /** Request the user to add your app only to a single channel. */
        single_channel?: boolean;
      };
    };
    responses: {
      /** Success example using a workspace app produces a very different kind of response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Exchanges a temporary OAuth verifier code for an access token. */
  oauth_v2_access: {
    parameters: {
      query: {
        /** Issued when you created your application. */
        client_id?: string;
        /** Issued when you created your application. */
        client_secret?: string;
        /** The `code` param returned via the OAuth callback. */
        code: string;
        /** This must match the originally submitted URI (if one was sent). */
        redirect_uri?: string;
      };
    };
    responses: {
      /** Successful token request with scopes for both a bot user and a user token */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Pins an item to a channel. */
  pins_add: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `pins:write` */
        token: string;
      };
      formData: {
        /** Channel to pin the item in. */
        channel: string;
        /** Timestamp of the message to pin. */
        timestamp?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "bad_timestamp"
            | "message_not_found"
            | "channel_not_found"
            | "no_item_specified"
            | "already_pinned"
            | "permission_denied"
            | "file_not_shared"
            | "not_pinnable"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "no_permission"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Lists items pinned to a channel. */
  pins_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `pins:read` */
        token: string;
        /** Channel to get pinned items for. */
        channel: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: [
          {
            items: [
              {
                created?: number;
                created_by?: definitions["defs_user_id"];
                file?: definitions["objs_file"];
                /** @enum {string} */
                type?: "file";
              },
              {
                channel?: definitions["defs_channel"];
                created?: number;
                created_by?: definitions["defs_user_id"];
                message?: definitions["objs_message"];
                /** @enum {string} */
                type?: "message";
              }
            ];
            ok: definitions["defs_ok_true"];
          },
          {
            count: number;
            ok: definitions["defs_ok_true"];
          }
        ];
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "channel_not_found"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "no_permission"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Un-pins an item from a channel. */
  pins_remove: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `pins:write` */
        token: string;
      };
      formData: {
        /** Channel where the item is pinned to. */
        channel: string;
        /** Timestamp of the message to un-pin. */
        timestamp?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "bad_timestamp"
            | "file_not_found"
            | "file_comment_not_found"
            | "message_not_found"
            | "no_item_specified"
            | "not_pinned"
            | "permission_denied"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "no_permission"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_typ"
            | "missing_post_typ"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeou"
            | "upgrade_required";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Adds a reaction to an item. */
  reactions_add: {
    parameters: {
      formData: {
        /** Channel where the message to add reaction to was posted. */
        channel: string;
        /** Reaction (emoji) name. */
        name: string;
        /** Timestamp of the message to add reaction to. */
        timestamp: string;
      };
      header: {
        /** Authentication token. Requires scope: `reactions:write` */
        token: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "bad_timestamp"
            | "message_not_found"
            | "no_item_specified"
            | "invalid_name"
            | "already_reacted"
            | "too_many_emoji"
            | "too_many_reactions"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "no_permission"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Gets reactions for an item. */
  reactions_get: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `reactions:read` */
        token: string;
        /** Channel where the message to get reactions for was posted. */
        channel?: string;
        /** File to get reactions for. */
        file?: string;
        /** File comment to get reactions for. */
        file_comment?: string;
        /** If true always return the complete reaction list. */
        full?: boolean;
        /** Timestamp of the message to get reactions for. */
        timestamp?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: [
          {
            channel: definitions["defs_channel"];
            message: definitions["objs_message"];
            ok: definitions["defs_ok_true"];
            /** @enum {string} */
            type: "message";
          },
          {
            file: definitions["objs_file"];
            ok: definitions["defs_ok_true"];
            /** @enum {string} */
            type: "file";
          },
          {
            comment: definitions["objs_comment"];
            file: definitions["objs_file"];
            ok: definitions["defs_ok_true"];
            /** @enum {string} */
            type: "file_comment";
          }
        ];
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "bad_timestamp"
            | "file_not_found"
            | "file_comment_not_found"
            | "message_not_found"
            | "no_item_specified"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "no_permission"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Lists reactions made by a user. */
  reactions_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `reactions:read` */
        token: string;
        /** Show reactions made by this user. Defaults to the authed user. */
        user?: string;
        /** If true always return the complete reaction list. */
        full?: boolean;
        count?: number;
        page?: number;
        /** Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection. See [pagination](/docs/pagination) for more details. */
        cursor?: string;
        /** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. */
        limit?: number;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          items: [
            {
              channel: definitions["defs_channel"];
              message: definitions["objs_message"];
              /** @enum {string} */
              type: "message";
            },
            {
              file: definitions["objs_file"];
              /** @enum {string} */
              type: "file";
            },
            {
              comment: definitions["objs_comment"];
              file: definitions["objs_file"];
              /** @enum {string} */
              type: "file_comment";
            }
          ][];
          ok: definitions["defs_ok_true"];
          paging?: definitions["objs_paging"];
          response_metadata?: definitions["objs_response_metadata"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "user_not_found"
            | "not_authed"
            | "invalid_auth"
            | "account_inactiv"
            | "no_permission"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Removes a reaction from an item. */
  reactions_remove: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `reactions:write` */
        token: string;
      };
      formData: {
        /** Reaction (emoji) name. */
        name: string;
        /** File to remove reaction from. */
        file?: string;
        /** File comment to remove reaction from. */
        file_comment?: string;
        /** Channel where the message to remove reaction from was posted. */
        channel?: string;
        /** Timestamp of the message to remove reaction from. */
        timestamp?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "bad_timestamp"
            | "file_not_found"
            | "file_comment_not_found"
            | "message_not_found"
            | "no_item_specified"
            | "invalid_name"
            | "no_reaction"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "no_permission"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Creates a reminder. */
  reminders_add: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `reminders:write` */
        token: string;
      };
      formData: {
        /** The content of the reminder */
        text: string;
        /** When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. "in 15 minutes," or "every Thursday") */
        time: string;
        /** The user who will receive the reminder. If no user is specified, the reminder will go to user who created it. */
        user?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          reminder: definitions["objs_reminder"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "cannot_parse"
            | "user_not_found"
            | "cannot_add_bot"
            | "cannot_add_slackbot"
            | "cannot_add_others"
            | "cannot_add_others_recurring"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Marks a reminder as complete. */
  reminders_complete: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `reminders:write` */
        token?: string;
      };
      formData: {
        /** The ID of the reminder to be marked as complete */
        reminder?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_found"
            | "cannot_complete_recurring"
            | "cannot_complete_others"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Deletes a reminder. */
  reminders_delete: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `reminders:write` */
        token?: string;
      };
      formData: {
        /** The ID of the reminder */
        reminder?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_found"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Gets information about a reminder. */
  reminders_info: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `reminders:read` */
        token?: string;
        /** The ID of the reminder */
        reminder?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          reminder: definitions["objs_reminder"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_found"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Lists all reminders created by or for a given user. */
  reminders_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `reminders:read` */
        token?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          reminders: definitions["objs_reminder"][];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Starts a Real Time Messaging session. */
  rtm_connect: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `rtm:stream` */
        token: string;
        /** Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching). */
        batch_presence_aware?: boolean;
        /** Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions). */
        presence_sub?: boolean;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          self: {
            id: definitions["defs_user_id"];
            name: string;
          };
          team: {
            domain: string;
            id: definitions["defs_team"];
            name: string;
          };
          /** Format: uri */
          url: string;
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Searches for messages matching a query. */
  search_messages: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `search:read` */
        token: string;
        /** Pass the number of results you want per "page". Maximum of `100`. */
        count?: number;
        /** Pass a value of `true` to enable query highlight markers (see below). */
        highlight?: boolean;
        page?: number;
        /** Search query. */
        query: string;
        /** Return matches sorted by either `score` or `timestamp`. */
        sort?: string;
        /** Change sort direction to ascending (`asc`) or descending (`desc`). */
        sort_dir?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Adds a star to an item. */
  stars_add: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `stars:write` */
        token: string;
      };
      formData: {
        /** Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`). */
        channel?: string;
        /** File to add star to. */
        file?: string;
        /** File comment to add star to. */
        file_comment?: string;
        /** Timestamp of the message to add star to. */
        timestamp?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "bad_timestamp"
            | "message_not_found"
            | "file_not_found"
            | "file_comment_not_found"
            | "channel_not_found"
            | "no_item_specified"
            | "already_starred"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Lists stars for a user. */
  stars_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `stars:read` */
        token?: string;
        count?: string;
        page?: string;
        /** Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection. See [pagination](/docs/pagination) for more details. */
        cursor?: string;
        /** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. */
        limit?: number;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          items: [
            {
              channel: definitions["defs_channel"];
              date_create: number;
              message: definitions["objs_message"];
              /** @enum {string} */
              type: "message";
            },
            {
              date_create: number;
              file: definitions["objs_file"];
              /** @enum {string} */
              type: "file";
            },
            {
              comment: definitions["objs_comment"];
              date_create: number;
              file: definitions["objs_file"];
              /** @enum {string} */
              type: "file_comment";
            },
            {
              channel: definitions["defs_channel"];
              date_create: number;
              /** @enum {string} */
              type: "channel";
            },
            {
              channel: definitions["defs_dm_id"];
              date_create: number;
              /** @enum {string} */
              type: "im";
            },
            {
              channel: definitions["defs_group_id"];
              date_create: number;
              /** @enum {string} */
              type: "group";
            }
          ][];
          ok: definitions["defs_ok_true"];
          paging?: definitions["objs_paging"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Removes a star from an item. */
  stars_remove: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `stars:write` */
        token: string;
      };
      formData: {
        /** Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`). */
        channel?: string;
        /** File to remove star from. */
        file?: string;
        /** File comment to remove star from. */
        file_comment?: string;
        /** Timestamp of the message to remove star from. */
        timestamp?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "bad_timestamp"
            | "message_not_found"
            | "file_not_found"
            | "file_comment_not_found"
            | "channel_not_found"
            | "no_item_specified"
            | "not_starred"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Gets the access logs for the current team. */
  team_accessLogs: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `admin` */
        token: string;
        /** End of time range of logs to include in results (inclusive). */
        before?: string;
        count?: string;
        page?: string;
      };
    };
    responses: {
      /** This response demonstrates pagination and two access log entries. */
      200: {
        schema: {
          logins: {
            count: number;
            country: unknown;
            date_first: number;
            date_last: number;
            ip: unknown;
            isp: unknown;
            region: unknown;
            user_agent: string;
            user_id: definitions["defs_user_id"];
            username: string;
          }[];
          ok: definitions["defs_ok_true"];
          paging: definitions["objs_paging"];
        };
      };
      /** A workspace must be on a paid plan to use this method, otherwise the `paid_only` error is thrown: */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "paid_only"
            | "over_pagination_limit"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Gets billable users information for the current team. */
  team_billableInfo: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `admin` */
        token: string;
        /** A user to retrieve the billable information for. Defaults to all users. */
        user?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Gets information about the current team. */
  team_info: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `team:read` */
        token: string;
        /** Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels */
        team?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          team: definitions["objs_team"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Gets the integration logs for the current team. */
  team_integrationLogs: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `admin` */
        token: string;
        /** Filter logs to this Slack app. Defaults to all logs. */
        app_id?: string;
        /** Filter logs with this change type. Defaults to all logs. */
        change_type?: string;
        count?: string;
        page?: string;
        /** Filter logs to this service. Defaults to all logs. */
        service_id?: string;
        /** Filter logs generated by this user’s actions. Defaults to all logs. */
        user?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          logs: {
            admin_app_id?: definitions["defs_app_id"];
            app_id: definitions["defs_app_id"];
            app_type: string;
            change_type: string;
            channel?: definitions["defs_channel"];
            date: string;
            scope: string;
            service_id?: string;
            service_type?: string;
            user_id: definitions["defs_user_id"];
            user_name: string;
          }[];
          ok: definitions["defs_ok_true"];
          paging: definitions["objs_paging"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Retrieve a team's profile. */
  team_profile_get: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `users.profile:read` */
        token: string;
        /** Filter by visibility. */
        visibility?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          profile: {
            fields: definitions["objs_team_profile_field"][];
          };
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "no_permission"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_typ"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeou"
            | "upgrade_required";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Create a User Group */
  usergroups_create: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `usergroups:write` */
        token: string;
      };
      formData: {
        /** A comma separated string of encoded channel IDs for which the User Group uses as a default. */
        channels?: string;
        /** A short description of the User Group. */
        description?: string;
        /** A mention handle. Must be unique among channels, users and User Groups. */
        handle?: string;
        /** Include the number of users in each User Group. */
        include_count?: boolean;
        /** A name for the User Group. Must be unique among User Groups. */
        name: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          usergroup: definitions["objs_subteam"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "permission_denied"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "user_is_restricted"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Disable an existing User Group */
  usergroups_disable: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `usergroups:write` */
        token: string;
      };
      formData: {
        /** Include the number of users in the User Group. */
        include_count?: boolean;
        /** The encoded ID of the User Group to disable. */
        usergroup: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          usergroup: definitions["objs_subteam"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "permission_denied"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "user_is_restricted"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Enable a User Group */
  usergroups_enable: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `usergroups:write` */
        token: string;
      };
      formData: {
        /** Include the number of users in the User Group. */
        include_count?: boolean;
        /** The encoded ID of the User Group to enable. */
        usergroup: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          usergroup: definitions["objs_subteam"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "user_is_restricted"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_require"
            | "fatal_error"
            | "missing_charset"
            | "superfluous_charset";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** List all User Groups for a team */
  usergroups_list: {
    parameters: {
      query: {
        /** Include the list of users for each User Group. */
        include_users?: boolean;
        /** Authentication token. Requires scope: `usergroups:read` */
        token: string;
        /** Include the number of users in each User Group. */
        include_count?: boolean;
        /** Include disabled User Groups. */
        include_disabled?: boolean;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          usergroups: definitions["objs_subteam"][];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "user_is_restricted"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_require"
            | "fatal_error"
            | "missing_charset"
            | "superfluous_charset";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Update an existing User Group */
  usergroups_update: {
    parameters: {
      formData: {
        /** A mention handle. Must be unique among channels, users and User Groups. */
        handle?: string;
        /** A short description of the User Group. */
        description?: string;
        /** A comma separated string of encoded channel IDs for which the User Group uses as a default. */
        channels?: string;
        /** Include the number of users in the User Group. */
        include_count?: boolean;
        /** The encoded ID of the User Group to update. */
        usergroup: string;
        /** A name for the User Group. Must be unique among User Groups. */
        name?: string;
      };
      header: {
        /** Authentication token. Requires scope: `usergroups:write` */
        token: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          usergroup: definitions["objs_subteam"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "permission_denied"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "user_is_restricted"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_require"
            | "fatal_error"
            | "missing_charset"
            | "superfluous_charset";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** List all users in a User Group */
  usergroups_users_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `usergroups:read` */
        token: string;
        /** Allow results that involve disabled User Groups. */
        include_disabled?: boolean;
        /** The encoded ID of the User Group to update. */
        usergroup: string;
      };
    };
    responses: {
      /** Standard success response when used with a user token */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          users: definitions["defs_user_id"][];
        };
      };
      /** Standard failure response when used with an invalid token */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "user_is_restricted"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_require"
            | "fatal_error"
            | "missing_charset"
            | "superfluous_charset";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Update the list of users for a User Group */
  usergroups_users_update: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `usergroups:write` */
        token: string;
      };
      formData: {
        /** Include the number of users in the User Group. */
        include_count?: boolean;
        /** The encoded ID of the User Group to update. */
        usergroup: string;
        /** A comma separated string of encoded user IDs that represent the entire list of users for the User Group. */
        users: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          usergroup: definitions["objs_subteam"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "permission_denied"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "user_is_restricted"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_require"
            | "fatal_error"
            | "missing_charset"
            | "superfluous_charset";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** List conversations the calling user may access. */
  users_conversations: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `conversations:read` */
        token?: string;
        /** Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where the calling user shares membership. */
        user?: string;
        /** Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im` */
        types?: string;
        /** Set to `true` to exclude archived channels from the list */
        exclude_archived?: boolean;
        /** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000. */
        limit?: number;
        /** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail. */
        cursor?: string;
      };
    };
    responses: {
      /** Typical success response with only public channels. Note how `num_members` and `is_member` are not returned like typical `conversations` objects. */
      200: {
        schema: {
          channels: definitions["objs_conversation"][];
          ok: definitions["defs_ok_true"];
          response_metadata?: {
            next_cursor: string;
          };
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "method_not_supported_for_channel_type"
            | "missing_scope"
            | "invalid_types"
            | "invalid_cursor"
            | "invalid_limit"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Delete the user profile photo */
  users_deletePhoto: {
    parameters: {
      formData: {
        /** Authentication token. Requires scope: `users.profile:write` */
        token: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Gets user presence information. */
  users_getPresence: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `users:read` */
        token: string;
        /** User to get presence info on. Defaults to the authed user. */
        user?: string;
      };
    };
    responses: {
      /** When requesting information for a different user, this method just returns the current presence (either `active` or `away`). */
      200: {
        schema: {
          auto_away?: boolean;
          connection_count?: number;
          last_activity?: number;
          manual_away?: boolean;
          ok: definitions["defs_ok_true"];
          online?: boolean;
          presence: string;
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          error: string;
          ok: definitions["defs_ok_false"];
        } & { [key: string]: { [key: string]: unknown } };
      };
    };
  };
  /** Get a user's identity. */
  users_identity: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `identity.basic` */
        token?: string;
      };
    };
    responses: {
      /** You will receive at a minimum the following information: */
      200: {
        schema: [
          {
            ok: definitions["defs_ok_true"];
            team: {
              id: definitions["defs_team"];
            };
            user: {
              id: definitions["defs_user_id"];
              name: string;
            };
          },
          {
            ok: definitions["defs_ok_true"];
            team: {
              id: definitions["defs_team"];
            };
            user: {
              /** Format: email */
              email: string;
              id: definitions["defs_user_id"];
              name: string;
            };
          },
          {
            ok: definitions["defs_ok_true"];
            team: {
              id: definitions["defs_team"];
            };
            user: {
              id: definitions["defs_user_id"];
              /** Format: url */
              image_192: string;
              /** Format: url */
              image_24: string;
              /** Format: url */
              image_32: string;
              /** Format: url */
              image_48: string;
              /** Format: url */
              image_512: string;
              /** Format: url */
              image_72: string;
              name: string;
            };
          },
          {
            ok: definitions["defs_ok_true"];
            team: {
              domain: string;
              id: definitions["defs_team"];
              /** Format: url */
              image_102: string;
              /** Format: url */
              image_132: string;
              /** Format: url */
              image_230: string;
              /** Format: url */
              image_34: string;
              /** Format: url */
              image_44: string;
              /** Format: url */
              image_68: string;
              /** Format: url */
              image_88: string;
              image_default: boolean;
              name: string;
            };
            user: {
              id: definitions["defs_user_id"];
              name: string;
            };
          }
        ];
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Gets information about a user. */
  users_info: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `users:read` */
        token: string;
        /** Set this to `true` to receive the locale for this user. Defaults to `false` */
        include_locale?: boolean;
        /** User to get info on */
        user?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          user: definitions["objs_user"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          callstack?: string;
          /** @enum {string} */
          error:
            | "user_not_found"
            | "user_not_visible"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Lists all users in a Slack team. */
  users_list: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `users:read` */
        token?: string;
        /** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors. */
        limit?: number;
        /** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail. */
        cursor?: string;
        /** Set this to `true` to receive the locale for users. Defaults to `false` */
        include_locale?: boolean;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          cache_ts: number;
          members: definitions["objs_user"][];
          ok: definitions["defs_ok_true"];
          response_metadata?: definitions["objs_response_metadata"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "limit_required"
            | "invalid_cursor"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "no_permission"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Find a user with an email address. */
  users_lookupByEmail: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `users:read.email` */
        token: string;
        /** An email address belonging to a user in the workspace */
        email: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          user: definitions["objs_user"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "users_not_found"
            | "enterprise_is_restricted"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "no_permission"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Retrieves a user's profile information. */
  users_profile_get: {
    parameters: {
      query: {
        /** Authentication token. Requires scope: `users.profile:read` */
        token: string;
        /** Include labels for each ID in custom profile fields */
        include_labels?: boolean;
        /** User to retrieve profile info for */
        user?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          profile: definitions["objs_user_profile"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "user_not_found"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Set the profile information for a user. */
  users_profile_set: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `users.profile:write` */
        token: string;
      };
      formData: {
        /** Name of a single key to set. Usable only if `profile` is not passed. */
        name?: string;
        /** Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters. */
        profile?: string;
        /** ID of user to change. This argument may only be specified by team admins on paid teams. */
        user?: string;
        /** Value to set a single key to. Usable only if `profile` is not passed. */
        value?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          /** Format: email */
          email_pending?: string;
          ok: definitions["defs_ok_true"];
          profile: definitions["objs_user_profile"];
          username: string;
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "reserved_name"
            | "invalid_profile"
            | "profile_set_failed"
            | "not_admin"
            | "not_app_admin"
            | "cannot_update_admin_user"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Marked a user as active. Deprecated and non-functional. */
  users_setActive: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `users:write` */
        token: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "ekm_access_denied"
            | "missing_scope"
            | "invalid_arguments"
            | "invalid_arg_name"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "request_timeout"
            | "fatal_error"
            | "internal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Set the user profile photo */
  users_setPhoto: {
    parameters: {
      formData: {
        /** Authentication token. Requires scope: `users.profile:write` */
        token: string;
        /** Width/height of crop box (always square) */
        crop_w?: string;
        /** X coordinate of top-left corner of crop box */
        crop_x?: string;
        /** Y coordinate of top-left corner of crop box */
        crop_y?: string;
        /** File contents via `multipart/form-data`. */
        image?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
          profile: {
            avatar_hash: string;
            /** Format: uri */
            image_1024: string;
            /** Format: uri */
            image_192: string;
            /** Format: uri */
            image_24: string;
            /** Format: uri */
            image_32: string;
            /** Format: uri */
            image_48: string;
            /** Format: uri */
            image_512: string;
            /** Format: uri */
            image_72: string;
            /** Format: uri */
            image_original: string;
          };
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @description possibly DEV/QA only */
          debug_step?: string;
          /** @description possibly DEV/QA only */
          dims?: string;
          /** @enum {string} */
          error:
            | "bad_image"
            | "too_large"
            | "too_many_frames"
            | "not_found"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "user_is_bot"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
          /** @description possibly DEV/QA only */
          time_ident?: number;
        };
      };
    };
  };
  /** Manually sets user presence. */
  users_setPresence: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `users:write` */
        token: string;
      };
      formData: {
        /** Either `auto` or `away` */
        presence: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        };
      };
      /** Typical error response */
      default: {
        schema: {
          /** @description Note: PHP callstack is only visible in dev/qa */
          callstack?: string;
          /** @enum {string} */
          error:
            | "invalid_presence"
            | "not_authed"
            | "invalid_auth"
            | "account_inactive"
            | "token_revoked"
            | "no_permission"
            | "org_login_required"
            | "invalid_arg_name"
            | "invalid_array_arg"
            | "invalid_charset"
            | "invalid_form_data"
            | "invalid_post_type"
            | "missing_post_type"
            | "team_added_to_org"
            | "invalid_json"
            | "json_not_object"
            | "request_timeout"
            | "upgrade_required"
            | "fatal_error";
          ok: definitions["defs_ok_false"];
        };
      };
    };
  };
  /** Open a view for a user. */
  views_open: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `none` */
        token: string;
      };
      query: {
        /** Exchange a trigger to post to the user. */
        trigger_id: string;
        /** A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. */
        view: string;
      };
    };
    responses: {
      /** Typical success response includes the opened view payload. */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response, before getting to any possible validation errors. */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Publish a static view for a User. */
  views_publish: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `none` */
        token: string;
      };
      query: {
        /** `id` of the user you want publish a view to. */
        user_id: string;
        /** A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. */
        view: string;
        /** A string that represents view state to protect against possible race conditions. */
        hash?: string;
      };
    };
    responses: {
      /** Typical success response includes the published view payload. */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response, before getting to any possible validation errors. */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Push a view onto the stack of a root view. */
  views_push: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `none` */
        token: string;
      };
      query: {
        /** Exchange a trigger to post to the user. */
        trigger_id: string;
        /** A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. */
        view: string;
      };
    };
    responses: {
      /** Typical success response includes the pushed view payload. */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response. */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Update an existing view. */
  views_update: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `none` */
        token: string;
      };
      query: {
        /** A unique identifier of the view to be updated. Either `view_id` or `external_id` is required. */
        view_id?: string;
        /** A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required. */
        external_id?: string;
        /** A [view object](/reference/surfaces/views). This must be a JSON-encoded string. */
        view?: string;
        /** A string that represents view state to protect against possible race conditions. */
        hash?: string;
      };
    };
    responses: {
      /** Typical success response includes the updated view payload. */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response. */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Indicate that an app's step in a workflow completed execution. */
  workflows_stepCompleted: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `workflow.steps:execute` */
        token: string;
      };
      query: {
        /** Context identifier that maps to the correct workflow step execution. */
        workflow_step_execute_id: string;
        /** Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](/reference/workflows/workflow_step#output) array from your `workflow_step` object. */
        outputs?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Indicate that an app's step in a workflow failed to execute. */
  workflows_stepFailed: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `workflow.steps:execute` */
        token: string;
      };
      query: {
        /** Context identifier that maps to the correct workflow step execution. */
        workflow_step_execute_id: string;
        /** A JSON-based object with a `message` property that should contain a human readable error message. */
        error: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
  /** Update the configuration for a workflow extension step. */
  workflows_updateStep: {
    parameters: {
      header: {
        /** Authentication token. Requires scope: `workflow.steps:execute` */
        token: string;
      };
      query: {
        /** A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`. */
        workflow_step_edit_id: string;
        /** A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables). */
        inputs?: string;
        /** An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed. */
        outputs?: string;
        /** An optional field that can be used to override the step name that is shown in the Workflow Builder. */
        step_name?: string;
        /** An optional field that can be used to override app image that is shown in the Workflow Builder. */
        step_image_url?: string;
      };
    };
    responses: {
      /** Typical success response */
      200: {
        schema: {
          ok: definitions["defs_ok_true"];
        } & { [key: string]: unknown };
      };
      /** Typical error response */
      default: {
        schema: {
          ok: definitions["defs_ok_false"];
        } & { [key: string]: unknown };
      };
    };
  };
}

export interface external {}
